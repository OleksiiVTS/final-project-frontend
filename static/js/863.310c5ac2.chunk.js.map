{"version":3,"file":"static/js/863.310c5ac2.chunk.js","mappings":"4NAEaA,EAAaC,EAAAA,GAAAA,QAAH,sW,UCUvB,EAPgB,kBACd,UAACD,EAAD,YACE,SAACE,EAAA,EAAD,KACA,SAACC,EAAA,EAAD,MAHY,ECHHC,EAAUH,EAAAA,GAAAA,QAAH,0CCyBpB,EAnBmB,SAAC,GAAkB,IAAhBI,EAAe,EAAfA,SACpB,OACE,UAACD,EAAD,YAEE,SAAC,EAAD,IAECC,IAWN,C,yMC6DD,EAvEwB,WACtB,IAEMC,EAAiB,CACrBC,cAHcC,EAAAA,EAAAA,IAAYC,EAAAA,IAGJC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,QAAT,KAE1BC,EAAYP,EAAeC,aAAaO,QAAO,SAAAC,GAAE,OACrDA,EAAGC,SAAS,QADyC,IAErDC,OACIC,EAAkBZ,EAAeC,aAAaO,QAAO,SAAAC,GAAE,OAC3DA,EAAGC,SAAS,cAD+C,IAE3DC,OACIE,EAAYb,EAAeC,aAAaO,QAAO,SAAAC,GAAE,OACrDA,EAAGC,SAAS,OADyC,IAErDC,OACIG,EAAgBP,EAAYK,EAAkBC,EAK9CE,EAAO,CACX,CACEC,KAAM,QACNC,GAAI,GACJC,GAR0BX,EAAYO,EAAiB,IASvDK,IAAK,KAEP,CACEH,KAAM,cACNC,GAAI,GACJC,GAbgCN,EAAkBE,EAAiB,IAcnEK,IAAK,KAEP,CACEH,KAAM,OACNC,GAAI,GACJC,GAlB0BL,EAAYC,EAAiB,IAmBvDK,IAAK,MAGT,OACE,UAACC,EAAA,EAAD,CACEC,MAAO,KACPC,OAAQ,IACRP,KAAMA,EACNQ,OAAQ,CACNC,IAAK,EACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,GARZ,WAWE,SAACC,EAAA,EAAD,CAAeC,gBAAgB,SAC/B,SAACC,EAAA,EAAD,CAAOC,QAAQ,UACf,SAACC,EAAA,EAAD,CAAOD,QAAQ,SACf,SAACE,EAAA,EAAD,KACA,SAACC,EAAA,EAAD,KACA,SAACC,EAAA,EAAD,CACEJ,QAAQ,KACRK,KAAK,UACLC,WAAW,SAACC,EAAA,EAAD,CAAWF,KAAK,OAAOG,OAAO,YAE3C,SAACJ,EAAA,EAAD,CACEJ,QAAQ,KACRK,KAAK,UACLC,WAAW,SAACC,EAAA,EAAD,CAAWF,KAAK,OAAOG,OAAO,eAIhD,E,oBCnCD,EArCuB,WACrB,IAAMC,GAAcC,EAAAA,EAAAA,MAAiBC,MAAM,EAAG,GAC9CC,QAAQC,IAAI,gBAAiBJ,GAC7B,IAAMK,GAAWC,EAAAA,EAAAA,MAKjB,OAJAC,EAAAA,EAAAA,YAAU,WACRF,GAASG,EAAAA,EAAAA,IAASR,GACnB,GAAE,CAACK,EAAUL,KAGZ,SAACS,EAAA,EAAD,WACE,4BACE,0BACE,wBAAI,kBAGN,SAAC,EAAD,QAoBP,C,wGC/CM,IAAM9C,EAAc,SAAA+C,GAAK,OAAIA,EAAMC,MAAMA,KAAhB,EACnBC,EAAgB,SAAAF,GAAK,OAAIA,EAAMC,MAAME,KAAhB,EACrBC,EAAkB,SAAAJ,GAAK,OAAIA,EAAMC,MAAMI,SAAhB,C","sources":["components/SideBar/SideBar.styled.jsx","components/SideBar/SideBar.jsx","components/MainLayout/MainLayout.styled.jsx","components/MainLayout/MainLayout.jsx","components/Statistics/StatisticsChart.jsx","pages/Private/StatisticsPage/StatisticsPage.jsx","redux/task/taskSelectors.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const SideBarBox = styled.section`\n  background-color: #fff;\n  border-right: 1px solid rgba(220, 227, 229, 0.5);\n\n  height: 100vh;\n  width: 290px;\n  padding: 32px 24px 24px 24px;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  color: rgba(52, 52, 52, 0.5);\n\n  @media screen and (max-width: 768px) {\n    display: none;\n  }\n`;\n","import React from 'react';\nimport UserNav from '../UserNav/UserNav.jsx';\nimport LogoutBtn from '../LogoutBtn/LogoutBtn';\nimport { SideBarBox } from './SideBar.styled.jsx';\n\nconst SideBar = () => (\n  <SideBarBox>\n    <UserNav />\n    <LogoutBtn />\n  </SideBarBox>\n);\n\nexport default SideBar;\n","import styled from 'styled-components';\n\nexport const Section = styled.section`\n\tdisplay: flex;\n`;\n","import React from 'react';\nimport SideBar from '../SideBar/SideBar.jsx';\n// import Header from '../Header/Header.jsx';\n// import { Link } from 'react-router-dom';\n// import { Circles } from 'react-loader-spinner'; //! Спинер\n\nimport { Section } from './MainLayout.styled.jsx';\n\nconst MainLayout = ({ children }) => {\n  return (\n    <Section>\n      {/* <h1> MainLayout</h1> */}\n      <SideBar />\n      {/* <Header /> */}\n      {children}\n    </Section>\n    // {isLoading && !error && (\n    //     <Circles\n    //       height=\"80\"\n    //       width=\"80\"\n    //       color=\"#4d78a9\"\n    //!       wrapperClass={css.loader}\n    //     />\n    //   )}\n  );\n};\n\nexport default MainLayout;\n\n// .loader {\n//     position: fixed;\n//     top: 0;\n//     width: 100%;\n//     height: 100%;\n//     display: flex;\n//     align-items: center;\n//     justify-content: center;\n//   }\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  Bar,\n  BarChart,\n  CartesianGrid,\n  Legend,\n  Rectangle,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport { selectTasks } from 'redux/task/taskSelectors';\n// import { getTasks } from 'redux/task/tasksAPI';\n\nconst StatisticsChart = () => {\n  const isTasks = useSelector(selectTasks);\n\n  const dataCurrentDay = {\n    categoryTask: isTasks.map(task => task.category),\n  };\n  const todoByDay = dataCurrentDay.categoryTask.filter(el =>\n    el.includes('to-do')\n  ).length;\n  const inprogressByDay = dataCurrentDay.categoryTask.filter(el =>\n    el.includes('in-progress')\n  ).length;\n  const doneByDay = dataCurrentDay.categoryTask.filter(el =>\n    el.includes('done')\n  ).length;\n  const allTasksByDay = todoByDay + inprogressByDay + doneByDay;\n  const todoByDayPercentages = (todoByDay / allTasksByDay) * 100;\n  const inprogressByDayPercentages = (inprogressByDay / allTasksByDay) * 100;\n  const doneByDayPercentages = (doneByDay / allTasksByDay) * 100;\n\n  const data = [\n    {\n      name: 'To-Do',\n      uv: 50,\n      pv: todoByDayPercentages,\n      amt: 100,\n    },\n    {\n      name: 'In-Progress',\n      uv: 50,\n      pv: inprogressByDayPercentages,\n      amt: 100,\n    },\n    {\n      name: 'Done',\n      uv: 50,\n      pv: doneByDayPercentages,\n      amt: 100,\n    },\n  ];\n  return (\n    <BarChart\n      width={1400}\n      height={860}\n      data={data}\n      margin={{\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5,\n      }}\n    >\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis dataKey=\"name\" />\n      <YAxis dataKey=\"amt\" />\n      <Tooltip />\n      <Legend />\n      <Bar\n        dataKey=\"pv\"\n        fill=\"#82ca9d\"\n        activeBar={<Rectangle fill=\"pink\" stroke=\"blue\" />}\n      />\n      <Bar\n        dataKey=\"uv\"\n        fill=\"#8884d8\"\n        activeBar={<Rectangle fill=\"gold\" stroke=\"purple\" />}\n      />\n    </BarChart>\n  );\n};\n\nexport default StatisticsChart;\n","import React, { useEffect } from 'react';\n\nimport MainLayout from 'components/MainLayout/MainLayout';\nimport StatisticsChart from 'components/Statistics/StatisticsChart';\n// import Header from 'components/Header/Header';\nimport { getCurrentDate } from 'utils/calendar';\nimport { useDispatch } from 'react-redux';\nimport { getTasks } from 'redux/task/taskOperations';\n\n// import { Link } from 'react-router-dom';\n// import { Circles } from 'react-loader-spinner'; //! Спинер\n\nconst StatisticsPage = () => {\n  const currentDate = getCurrentDate().slice(0, 7);\n  console.log('currentDate: ', currentDate);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getTasks(currentDate));\n  }, [dispatch, currentDate]);\n\n  return (\n    <MainLayout>\n      <div>\n        <div>\n          <h1>Statistics</h1>\n        </div>\n        {/* <Header /> */}\n        <StatisticsChart />\n        {/* <Suspense fallback={null}>\n          <CalendarToolbar\n            onClickPrev={handlePrev}\n            onClickNext={handleNext}\n            today={currentDate}\n          />\n        </Suspense> */}\n      </div>\n    </MainLayout>\n\n    // {isLoading && !error && (\n    //     <Circles\n    //       height=\"80\"\n    //       width=\"80\"\n    //       color=\"#4d78a9\"\n    //!       wrapperClass={css.loader}\n    //     />\n    //   )}\n  );\n};\n\nexport default StatisticsPage;\n\n// .loader {\n//     position: fixed;\n//     top: 0;\n//     width: 100%;\n//     height: 100%;\n//     display: flex;\n//     align-items: center;\n//     justify-content: center;\n//   }\n","export const selectTasks = state => state.tasks.tasks;\nexport const selectIsError = state => state.tasks.error;\nexport const selectIsLoading = state => state.tasks.isLoading;\n"],"names":["SideBarBox","styled","UserNav","LogoutBtn","Section","children","dataCurrentDay","categoryTask","useSelector","selectTasks","map","task","category","todoByDay","filter","el","includes","length","inprogressByDay","doneByDay","allTasksByDay","data","name","uv","pv","amt","BarChart","width","height","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","fill","activeBar","Rectangle","stroke","currentDate","getCurrentDate","slice","console","log","dispatch","useDispatch","useEffect","getTasks","MainLayout","state","tasks","selectIsError","error","selectIsLoading","isLoading"],"sourceRoot":""}