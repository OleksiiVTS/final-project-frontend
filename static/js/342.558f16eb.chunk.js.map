{"version":3,"file":"static/js/342.558f16eb.chunk.js","mappings":"+QAEaA,EAAUC,EAAAA,GAAAA,IAAH,qMA+BPC,GApBeD,EAAAA,GAAAA,OAAH,iaAoBKA,EAAAA,GAAAA,IAAH,wFAMdE,EAAaF,EAAAA,GAAAA,OAAH,+bAKD,qBAAGG,WAAH,IAIA,qBAAGC,OAAH,IACX,qBAAGC,KAAH,IAME,qBAAGC,UAAH,IAQAC,GAAcP,EAAAA,EAAAA,IAAOE,EAAPF,CAAH,6G,0LCjDxB,EAZ0BA,EAAAA,GAAAA,IAAH,8NAID,qBAAGI,OAAH,I,8BCJTI,EAAiBR,EAAAA,GAAAA,IAAH,6U,UCiC3B,EA3BwB,SAAC,GAAgD,IAA9CS,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,YAAaC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,MAC1D,GAAwBC,EAAAA,EAAAA,UAAS,SAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAaC,EAAAA,EAAAA,MAAbD,SAWR,OATAE,EAAAA,EAAAA,YAAU,WACJF,EAASG,SAAS,OACpBJ,EAAQ,OAIVA,EAAQ,QACT,GAAE,CAACC,KAGF,UAACR,EAAD,YACE,SAAC,EAAD,CACEE,YAAaA,EACbC,YAAaA,EACbG,KAAMA,EACNM,KAAMX,EACNG,MAAOA,KAET,SAAC,EAAD,CAAoBH,MAAOA,EAAOY,aAAcN,EAASH,MAAOA,MAGrE,E,8BC2ED,EAxFuB,SAAC,GAOjB,IANLF,EAMI,EANJA,YACAC,EAKI,EALJA,YACAG,EAII,EAJJA,KACAM,EAGI,EAHJA,KACAR,EAEI,EAFJA,MA2BMU,GAAcC,EAAAA,EAAAA,GAAMH,EAAM,aAAc,IAAII,MAElD,OACE,UAAC,KAAD,YACE,SAAC,EAAD,CAAuBV,KAAMA,EAAMM,KAAME,KAOzC,UAAC,KAAD,YACE,SAAC,KAAD,CACEG,QAAS,WACPf,EAAYI,EACb,EACDV,QAAmB,SAAVQ,EAAmB,UAAY,UACxCT,YACY,SAAVS,EACI,4BACA,4BAENP,MAAiB,SAAVO,EAAmB,UAAY,UACtCN,WACY,SAAVM,EACI,4BACA,yBAdR,UAiBE,SAAC,IAAD,CAAcc,MAAM,OAAOC,OAAO,YAGpC,SAAC,KAAD,CACEF,QAAS,WACPd,EAAYG,EACb,EACDV,QAAmB,SAAVQ,EAAmB,UAAY,UACxCT,YACY,SAAVS,EACI,4BACA,4BAENP,MAAiB,SAAVO,EAAmB,UAAY,UACtCN,WACY,SAAVM,EACI,4BACA,yBAdR,UAiBE,SAAC,IAAD,CAAac,MAAM,OAAOC,OAAO,gBAK1C,E,oBCvGYC,EAAO5B,EAAAA,GAAAA,GAAH,0CAIJ6B,GAAgB7B,EAAAA,EAAAA,IAAO8B,EAAAA,GAAP9B,CAAH,qrBAMJ,qBAAGI,OAAH,IAUE,qBAAG2B,YAAH,IACX,qBAAGzB,UAAH,ICcb,EAjC2B,SAAC,GAAoC,IAAlCG,EAAiC,EAAjCA,MAAOY,EAA0B,EAA1BA,aAAcT,EAAY,EAAZA,MAC3CoB,GAAiBC,EAAAA,EAAAA,GAAO,IAAIT,KAAKf,GAAQ,cAE/C,OACE,UAACmB,EAAD,YACE,yBACE,SAACC,EAAD,CACEK,UAAU,QACVC,GAAE,0BAAqBH,GACvBP,QAAS,kBAAMJ,EAAa,QAAnB,EACTjB,QAAmB,SAAVQ,EAAmB,UAAY,UACxCmB,aAAwB,SAAVnB,EAAmB,UAAY,UAC7CN,WAAsB,SAAVM,EAAmB,UAAY,UAN7C,SAOC,aAIH,yBACE,SAACiB,EAAD,CACEK,UAAU,MACVC,GAAE,wBAAmBH,GACrBP,QAAS,kBAAMJ,EAAa,MAAnB,EACTjB,QAAmB,SAAVQ,EAAmB,UAAY,UACxCmB,aAAwB,SAAVnB,EAAmB,UAAY,UAC7CN,WAAsB,SAAVM,EAAmB,UAAY,UAN7C,SAOC,YAMR,E,GClCsBZ,EAAAA,GAAAA,IAAH,4WAkBgBoC,EAAAA,EAAAA,IAAH,q5G,SCoBjC,G,eAhC8B,SAAC,GAAoB,IAAlBtB,EAAiB,EAAjBA,KAAMM,EAAW,EAAXA,KAC/BiB,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,MACTC,EAAWC,QAAQC,OAAOC,KAAKL,GAAQM,QAE7C,GAAkChC,EAAAA,EAAAA,UAASO,GAA3C,eAAO0B,EAAP,KAAkBC,EAAlB,KAMA,OAJA7B,EAAAA,EAAAA,YAAU,WACR6B,EAAa3B,EACd,GAAE,CAACA,KAGF,SAAC,IAAD,CACE4B,SAAU,SAAA5B,GACR2B,EAAa3B,GACb,IAAM6B,GAAgBhB,EAAAA,EAAAA,GAAOb,EAAM,cAC/B2B,GACFA,EAAaE,GAEfZ,EACEI,EAAQ,oBAAgB3B,EAAhB,YAAwBmC,GAAkB,cAErD,EACDC,MAAOJ,EACPK,UAAW,KACXlB,OAAiB,QAATnB,EAAiB,UAAY,SACrCsC,OAAO,QACPC,kBAAkB,GAGvB,E,sGC3BD,EAXuB,SAAAC,GAAK,OAC3B,gCAAK5B,MAAM,MAAMC,OAAO,MAAM4B,KAAK,QAAWD,GAA9C,cACC,iBACCE,EAAE,8BACFC,OAAO,eACPC,YAAY,MACZC,cAAc,QACdC,eAAe,YAPU,ECW5B,EAXwB,SAAAN,GAAK,OAC5B,gCAAK5B,MAAM,MAAMC,OAAO,MAAM4B,KAAK,QAAWD,GAA9C,cACC,iBACCE,EAAE,+BACFC,OAAO,eACPC,YAAY,MACZC,cAAc,QACdC,eAAe,YAPW,C,8GCEhBC,EAAa7D,EAAAA,GAAAA,QAAH,sW,UCUvB,EAPgB,kBACd,UAAC6D,EAAD,YACE,SAACC,EAAA,EAAD,KACA,SAACC,EAAA,EAAD,MAHY,ECHHC,EAAUhE,EAAAA,GAAAA,QAAH,0CCyBpB,EAnBmB,SAAC,GAAkB,IAAhBiE,EAAe,EAAfA,SACpB,OACE,UAACD,EAAD,YAEE,SAAC,EAAD,IAECC,IAWN,C,sECvBYC,E,QAAkBlE,GAAAA,IAAH,kI","sources":["components/Calendar/common/PeriodSelector.styled.jsx","components/Calendar/common/CalendarContainer.jsx","components/Calendar/common/CalendarToolbar.styled.jsx","components/Calendar/common/CalendarToolbar.jsx","components/Calendar/common/PeriodSelector.jsx","components/Calendar/common/PeriodTypeSelector.styled.jsx","components/Calendar/common/PeriodTypeSelector.jsx","components/Calendar/common/CalendarDatePicker.styled.jsx","components/Calendar/common/NewCalendarDatePicker.jsx","components/Calendar/icons/ChevronLeft.jsx","components/Calendar/icons/ChevronRight.jsx","components/SideBar/SideBar.styled.jsx","components/SideBar/SideBar.jsx","components/MainLayout/MainLayout.styled.jsx","components/MainLayout/MainLayout.jsx","pages/Private/CalendarPage/CalendarPage.styled.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 18px;\n\n  @media screen and (min-width: 768px) {\n    margin-bottom: 0;\n  }\n`;\n\nexport const TitleWrapper = styled.button`\n  width: 195px;\n  padding: 6px 12px;\n  border-radius: 8px;\n  background-color: #3e85f3;\n  color: #ffffff;\n  font-size: 14px;\n  font-weight: 700;\n  line-height: calc(18 / 14);\n  text-align: center;\n  text-transform: uppercase;\n\n  @media screen and (min-width: 768px) {\n    justify-content: space-around;\n    align-items: center;\n    padding: 8px 12px;\n    font-size: 16px;\n  }\n`;\n\nexport const ButtonsWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 8px;\n`;\n\nexport const ButtonLeft = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 5px 8px;\n  border: 1px solid ${({ bordercolor }) => bordercolor};\n  border-radius: 8px;\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n  background-color: ${({ bgcolor }) => bgcolor};\n  color: ${({ color }) => color};\n  font-size: 20px;\n  cursor: pointer;\n  transition: color 250ms;\n\n  &:hover {\n    color: ${({ hovercolor }) => hovercolor};\n  }\n\n  @media screen and (min-width: 768px) {\n    padding: 7px 9px;\n  }\n`;\n\nexport const ButtonRight = styled(ButtonLeft)`\n  border-radius: 8px;\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n`;\n","import styled from 'styled-components';\n\nconst CalendarContainer = styled.div`\n  width: 1151px;\n  height: 100%;\n  padding-inline: 20px;\n  background-color: ${({ bgcolor }) => bgcolor};\n  /* background-color: #f7f6f9; */\n\n  @media screen and (min-width: 768px) {\n    padding-inline: 32px;\n  }\n`;\n\nexport default CalendarContainer;\n","import styled from 'styled-components';\n\nexport const ToolbarWrapper = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tmargin-bottom: 24px;\n\n\t@media screen and (min-width: 768px) {\n\t\tflex-direction: row;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tmargin-bottom: 32px;\n\t}\n\n\t@media screen and (min-width: 1440px) {\n\t\tmargin-bottom: 40px;\n\t}\n`;\n","import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { PeriodSelector, PeriodTypeSelector } from '.';\n\nimport { ToolbarWrapper } from './CalendarToolbar.styled';\n\nconst CalendarToolbar = ({ today, onClickPrev, onClickNext, theme }) => {\n  const [type, setType] = useState('month');\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    if (pathname.includes('day')) {\n      setType('day');\n      return;\n    }\n\n    setType('month');\n  }, [pathname]);\n\n  return (\n    <ToolbarWrapper>\n      <PeriodSelector\n        onClickPrev={onClickPrev}\n        onClickNext={onClickNext}\n        type={type}\n        date={today}\n        theme={theme}\n      />\n      <PeriodTypeSelector today={today} onChangeType={setType} theme={theme} />\n    </ToolbarWrapper>\n  );\n};\n\nexport default CalendarToolbar;\n\nCalendarToolbar.propTypes = {\n  onClickPrev: PropTypes.func.isRequired,\n  onClickNext: PropTypes.func.isRequired,\n  today: PropTypes.string.isRequired,\n};\n","// import { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  // format,\n  parse,\n} from 'date-fns';\n\nimport { NewCalendarDatePicker } from '.';\n// import { CalendarDatePicker } from '.';\n\nimport { ChevronLeft, ChevronRight } from '../icons';\nimport {\n  Wrapper,\n  // TitleWrapper,\n  ButtonsWrapper,\n  ButtonLeft,\n  ButtonRight,\n} from './PeriodSelector.styled';\n// import { useState } from 'react';\n\nconst PeriodSelector = ({\n  onClickPrev,\n  onClickNext,\n  type,\n  date,\n  theme,\n  // setCurrentDate,\n}) => {\n  // const getFormattedDate = () => {\n  // \treturn format(\n  // \t\tnew Date(date),\n  // \t\ttype === 'day' ? 'dd MMMM yyyy' : 'MMMM yyyy'\n  // \t);\n  // };\n\n  // console.log(setCurrentDate);\n\n  // const CustomInput = forwardRef(({ value, onClick }, ref) => {\n  // \tconst formattedDate = getFormattedDate();\n\n  // \tconst monthYear = formattedDate.split(' ')[0];\n  // \tconst preparedMonth = `months.${monthYear.toLowerCase()}`;\n\n  // \treturn (\n  // \t\t<TitleWrapper onClick={onClick} ref={ref}>\n  // \t\t\t{type === 'day'\n  // \t\t\t\t? value\n  // \t\t\t\t: `${preparedMonth} ${formattedDate.split(' ')[1]}`}\n  // \t\t</TitleWrapper>\n  // \t);\n  // });\n\n  const currentDate = parse(date, 'yyyy-MM-dd', new Date());\n\n  return (\n    <Wrapper>\n      <NewCalendarDatePicker type={type} date={currentDate} />\n      {/* <CalendarDatePicker\n\t\t\t\ttype={type}\n\t\t\t\tcustomInput={CustomInput} ===\n\t\t\t\tonSelectDay={currentDate}\n\t\t\t\tsetCurrentDate={setCurrentDate} ===\n\t\t\t/> */}\n      <ButtonsWrapper>\n        <ButtonLeft\n          onClick={() => {\n            onClickPrev(type);\n          }}\n          bgcolor={theme === 'dark' ? '#21222c' : '#ffffff'}\n          bordercolor={\n            theme === 'dark'\n              ? 'rgba(255, 255, 255, 0.15)'\n              : 'rgba(220, 227, 229, 0.80)'\n          }\n          color={theme === 'dark' ? '#ffffff' : '#343434'}\n          hovercolor={\n            theme === 'dark'\n              ? 'rgba(255, 255, 255, 0.15)'\n              : 'rgba(220, 227, 229, 1)'\n          }\n        >\n          <ChevronRight width=\"18px\" height=\"18px\" />\n        </ButtonLeft>\n\n        <ButtonRight\n          onClick={() => {\n            onClickNext(type);\n          }}\n          bgcolor={theme === 'dark' ? '#21222C' : '#ffffff'}\n          bordercolor={\n            theme === 'dark'\n              ? 'rgba(255, 255, 255, 0.15)'\n              : 'rgba(220, 227, 229, 0.80)'\n          }\n          color={theme === 'dark' ? '#ffffff' : '#343434'}\n          hovercolor={\n            theme === 'dark'\n              ? 'rgba(255, 255, 255, 0.15)'\n              : 'rgba(220, 227, 229, 1)'\n          }\n        >\n          <ChevronLeft width=\"18px\" height=\"18px\" />\n        </ButtonRight>\n      </ButtonsWrapper>\n    </Wrapper>\n  );\n};\n\nexport default PeriodSelector;\n\nPeriodSelector.propTypes = {\n  onClickPrev: PropTypes.func.isRequired,\n  onClickNext: PropTypes.func.isRequired,\n  type: PropTypes.string,\n  date: PropTypes.string,\n  // value: PropTypes.any,\n  // onClick: PropTypes.func,\n  // setCurrentDate: PropTypes.func,\n};\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const List = styled.ul`\n  display: flex;\n`;\n\nexport const StyledNavLink = styled(NavLink)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 76px;\n  height: 34px;\n  background-color: ${({ bgcolor }) => bgcolor};\n  color: #3e85f3;\n  font-size: 14px;\n  font-weight: 500;\n  line-height: calc(18 / 14);\n  transition: background-color 250ms, color 250ms;\n\n  &.active,\n  &:hover,\n  &:focus {\n    background-color: ${({ hoverbgcolor }) => hoverbgcolor};\n    color: ${({ hovercolor }) => hovercolor};\n  }\n\n  &.month {\n    border-top-left-radius: 8px;\n    border-bottom-left-radius: 8px;\n    border-right: 1px solid rgba(62, 133, 243, 0.2);\n  }\n\n  &.day {\n    border-top-right-radius: 8px;\n    border-bottom-right-radius: 8px;\n  }\n\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { format } from 'date-fns';\n\nimport { List, StyledNavLink } from './PeriodTypeSelector.styled';\n\nconst PeriodTypeSelector = ({ today, onChangeType, theme }) => {\n  const formattedToday = format(new Date(today), 'yyyy-MM-dd');\n\n  return (\n    <List>\n      <li>\n        <StyledNavLink\n          className=\"month\"\n          to={`/calendar/month/${formattedToday}`}\n          onClick={() => onChangeType('month')}\n          bgcolor={theme === 'dark' ? '#21222c' : '#e3f3ff'}\n          hoverbgcolor={theme === 'dark' ? '#3e85f3' : '#cae8ff'}\n          hovercolor={theme === 'dark' ? '#ffffff' : '#3e85f3'}\n        >\n          Month\n        </StyledNavLink>\n      </li>\n      <li>\n        <StyledNavLink\n          className=\"day\"\n          to={`/calendar/day/${formattedToday}`}\n          onClick={() => onChangeType('day')}\n          bgcolor={theme === 'dark' ? '#21222c' : '#e3f3ff'}\n          hoverbgcolor={theme === 'dark' ? '#3e85f3' : '#cae8ff'}\n          hovercolor={theme === 'dark' ? '#ffffff' : '#3e85f3'}\n        >\n          Day\n        </StyledNavLink>\n      </li>\n    </List>\n  );\n};\n\nexport default PeriodTypeSelector;\n\nPeriodTypeSelector.propTypes = {\n  today: PropTypes.string.isRequired,\n  onChangeType: PropTypes.func.isRequired,\n};\n","import styled, { createGlobalStyle } from 'styled-components';\n\nexport const DateBtn = styled.div`\n\tpadding: 6px 12px;\n\tborder-radius: 8px;\n\tbackground-color: #3e85f3;\n\tcolor: #ffffff;\n\tfont-size: 14px;\n\tfont-weight: 700;\n\tline-height: calc(18 / 14);\n\ttext-align: center;\n\ttext-transform: uppercase;\n\n\t@media screen and (min-width: 768px) {\n\t\tmargin-block: 33px;\n\t\tpadding: 8px 12px;\n\t\tfont-size: 16px;\n\t}\n`;\n\nexport const CalendarGlobalStyles = createGlobalStyle`\n\t.react-datepicker__wrapper {\n\t\tposition: relative;\n\t}\n\n\t.react-datepicker {\n\t\tposition: absolute;\n\t\tleft: 50%;\n\t\ttop: 50%;\n\t\ttransform: translate(-1%, 0%);\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\talign-items: center;\n\t\twidth: 327px;\n\t\theight: 354px;\n\t\tpadding: 9px 18px;\n\t\tborder-radius: 16px;\n\t\tbackground-color: #3E85F3;\n\t\tfont-family: Inter;\n\t}\n\t\n\t.react-datepicker__month-container {\n\t\tfloat: inherit;\n\t\tbox-sizing: border-box;\n\t}\n\n\t.react-datepicker__header {\n\t\tposition: relative;\n\t\tbackground-color: #3E85F3;\n\t}\n\n\t.react-datepicker__day-names {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tpadding: 12px 19px;\n\t\tborder-bottom: 1px solid rgba(255, 255, 255, 0.4);\n\t}\n\n\t.react-datepicker__header:not(.react-datepicker__header--has-time-select) {\n\t\tpadding: 0;\n\t\tborder-bottom: 0px;\n\t}\n\n\t.react-datepicker__day react-datepicker__day--018.react-datepicker__day--selected react-datepicker__day--today {\n\t\toutline: none;\n\t\tborder: none;\n\t}\n\n\t.react-datepicker__current-month {\n\t\tfont-family: Inter;\n\t\tfont-size: 20px;\n\t\tfont-weight: 600;\n\t\tline-height: calc(24 / 20);\n\t\ttext-align: center;\n\t\tcolor: #ffffff;\n\t}\n\n\t.react-datepicker__day-name {\n\t\tmargin: 0;\n\t\tpadding: 12px 19px;\n\t\tfont-family: Inter;\n\t\tfont-size: 14px;\n\t\tfont-weight: 600;\n\t\tline-height: calc(18 / 14);\n\t\ttext-align: center;\n\t\tcolor: #ffffff;\n\t}\n\n\t.react-datepicker__navigation {\n\t\tmargin-top: 24px;\n\t\tcolor: #ffffff;\n\t}\n\n\t.react-datepicker__navigation--previous {\n\t\tleft: 7px;\n\t\twidth: 18px;\n\t\theight: 18px;\n\t}\n\n\t.react-datepicker__navigation--next {\n\t\tright: 7px;\n\t\twidth: 18px;\n\t\theight: 18px;\n\t}\n\n\t.react-datepicker__navigation-icon::before:hover:focus {\n\t\tborder-color: #ffffff;\n\t}\n\n\t.react-datepicker__week {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: space-between;\n\t\tcolor: #ffffff;\n\t}\n\n\t.react-datepicker__day {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\tgap: 8px;\n\t\tflex-shrink: 0;\n\t\twidth: 32px;\n\t\theight: 32px;\n\t\tmargin: 0;\n\t\tborder-radius: 50%;\n\t\tcolor: #ffffff;\n\t\tfont-family: Inter;\n\t\tfont-size: 14px;\n\t\tfont-weight: 400;\n\t\tline-height: calc(18 / 14);\n\t\ttext-align: center;\n\t}\n\n\t.react-datepicker__month {\n\t\tdisplay: flex;\n\t\tgap: 7px;\n\t\tflex-direction: column;\n\t\tjustify-content: space-between;\n\t\tmargin: 0;\n\t\tpadding-top: 16px;\n\t}\n\n\t.react-datepicker__day--selected {\n\t\tbackground-color: #ffffff;\n\t\tcolor: #3e85f3;\n\t\tfont-size: 14px;\n\t}\n\n\t.react-datepicker__day--selected:hover {\n\t\tborder-radius: 50%;\n\t\tbackground-color: #ffffff;\n\t}\n\n\t.react-datepicker__day:hover {\n\t\tborder-radius: 50%;\n\t\tbackground-color: #ffffff;\n\t\tcolor: #3e85f3;\n\t}\n\n\t.react-datepicker__day--keyboard-selected {\n\t\tborder-radius: 50%;\n\t\tbackground-color: #ffffff;\n\t\tcolor: #3e85f3;\n\t}\n\n\t.react-datepicker__day--weekend {\n\t\topacity: 50%;\n\t}\n\n\t.react-datepicker__day--outside-month {\n\t\tbackground-color: transparent;\n\t\tpointer-events: none;\n\t\topacity: 0;\n\t}\n\n\t.react-datepicker__view-calendar-icon input {\n\t\tpadding: 6px 10px 5px 13px;\n\t}\n\n\t.react-datepicker__triangle {\n\t\tvisibility: hidden;\n\t}\n`;\n","import { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport { format } from 'date-fns';\nimport DatePicker from 'react-date-picker';\nimport 'react-date-picker/dist/DatePicker.css';\nimport 'react-calendar/dist/Calendar.css';\n\nconst NewCalendarDatePicker = ({ type, date }) => {\n  const navigate = useNavigate();\n  const params = useParams();\n  const isParams = Boolean(Object.keys(params).length);\n\n  const [dateValue, setDateValue] = useState(date);\n\n  useEffect(() => {\n    setDateValue(date);\n  }, [date]);\n\n  return (\n    <DatePicker\n      onChange={date => {\n        setDateValue(date);\n        const formattedDate = format(date, 'yyyy-MM-dd');\n        if (setDateValue) {\n          setDateValue(formattedDate);\n        }\n        navigate(\n          isParams ? `/calendar/${type}/${formattedDate}` : '/statistics'\n        );\n      }}\n      value={dateValue}\n      clearIcon={null}\n      format={type === 'day' ? 'y-MM-dd' : 'MMMM-y'}\n      locale=\"en-US\"\n      showLeadingZeros={true}\n    />\n  );\n};\n\nexport default NewCalendarDatePicker;\n","const SvgChevronLeft = props => (\n\t<svg width=\"1em\" height=\"1em\" fill=\"none\" {...props}>\n\t\t<path\n\t\t\td=\"M6.75 13.5L11.25 9L6.75 4.5\"\n\t\t\tstroke=\"currentColor\"\n\t\t\tstrokeWidth=\"1.5\"\n\t\t\tstrokeLinecap=\"round\"\n\t\t\tstrokeLinejoin=\"round\"\n\t\t/>\n\t</svg>\n);\nexport default SvgChevronLeft;\n","const SvgChevronRight = props => (\n\t<svg width=\"1em\" height=\"1em\" fill=\"none\" {...props}>\n\t\t<path\n\t\t\td=\"M11.25 13.5L6.75 9L11.25 4.5\"\n\t\t\tstroke=\"currentColor\"\n\t\t\tstrokeWidth=\"1.5\"\n\t\t\tstrokeLinecap=\"round\"\n\t\t\tstrokeLinejoin=\"round\"\n\t\t/>\n\t</svg>\n);\nexport default SvgChevronRight;\n","import styled from 'styled-components';\n\nexport const SideBarBox = styled.section`\n  background-color: #fff;\n  border-right: 1px solid rgba(220, 227, 229, 0.5);\n\n  height: 100vh;\n  width: 290px;\n  padding: 32px 24px 24px 24px;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  color: rgba(52, 52, 52, 0.5);\n\n  @media screen and (max-width: 768px) {\n    display: none;\n  }\n`;\n","import React from 'react';\nimport UserNav from '../UserNav/UserNav.jsx';\nimport LogoutBtn from '../LogoutBtn/LogoutBtn';\nimport { SideBarBox } from './SideBar.styled.jsx';\n\nconst SideBar = () => (\n  <SideBarBox>\n    <UserNav />\n    <LogoutBtn />\n  </SideBarBox>\n);\n\nexport default SideBar;\n","import styled from 'styled-components';\n\nexport const Section = styled.section`\n\tdisplay: flex;\n`;\n","import React from 'react';\nimport SideBar from '../SideBar/SideBar.jsx';\n// import Header from '../Header/Header.jsx';\n// import { Link } from 'react-router-dom';\n// import { Circles } from 'react-loader-spinner'; //! Спинер\n\nimport { Section } from './MainLayout.styled.jsx';\n\nconst MainLayout = ({ children }) => {\n  return (\n    <Section>\n      {/* <h1> MainLayout</h1> */}\n      <SideBar />\n      {/* <Header /> */}\n      {children}\n    </Section>\n    // {isLoading && !error && (\n    //     <Circles\n    //       height=\"80\"\n    //       width=\"80\"\n    //       color=\"#4d78a9\"\n    //!       wrapperClass={css.loader}\n    //     />\n    //   )}\n  );\n};\n\nexport default MainLayout;\n\n// .loader {\n//     position: fixed;\n//     top: 0;\n//     width: 100%;\n//     height: 100%;\n//     display: flex;\n//     align-items: center;\n//     justify-content: center;\n//   }\n","import styled from 'styled-components';\n\nexport const HeaderContainer = styled.div`\n  margin-block: 24px 64px;\n\n  @media screen and (min-width: 768px) {\n    margin-block: 40px 32px;\n  }\n`;\n"],"names":["Wrapper","styled","ButtonsWrapper","ButtonLeft","bordercolor","bgcolor","color","hovercolor","ButtonRight","ToolbarWrapper","today","onClickPrev","onClickNext","theme","useState","type","setType","pathname","useLocation","useEffect","includes","date","onChangeType","currentDate","parse","Date","onClick","width","height","List","StyledNavLink","NavLink","hoverbgcolor","formattedToday","format","className","to","createGlobalStyle","navigate","useNavigate","params","useParams","isParams","Boolean","Object","keys","length","dateValue","setDateValue","onChange","formattedDate","value","clearIcon","locale","showLeadingZeros","props","fill","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","SideBarBox","UserNav","LogoutBtn","Section","children","HeaderContainer"],"sourceRoot":""}