{"version":3,"file":"static/js/962.65a6a1f9.chunk.js","mappings":"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","sources":["components/InfoModal/InfoModal.styled.jsx","components/InfoModal/InfoModal.jsx","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","components/RegisterForm/RegisterForm.styled.jsx","components/RegisterForm/RegisterForm.jsx","pages/Public/RegisterPage/RegisterPage.jsx","redux/auth/firebase.js"],"sourcesContent":["import styled from '@emotion/styled/macro';\n\nexport const ConfirmBtn = styled.button`\n  width: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: #3e85f3;\n  border-radius: 8px;\n  padding: 10px;\n  color: #fff;\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 1.28;\n  border: 0;\n  cursor: pointer;\n\n  &:hover {\n    background: #2b78ef;\n    box-shadow: 4px 2px 16px 0px rgba(136, 165, 191, 0.48);\n    transition: background-color box-shadow 0.2s;\n  }\n`;\n\nexport const CancelBtn = styled.button`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: #efefef;\n  border-radius: 8px;\n  padding: 10px;\n  color: #111;\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 1.28;\n  border: 0;\n  cursor: pointer;\n\n  &:hover {\n    box-shadow: 4px 2px 16px 0px rgba(136, 165, 191, 0.48);\n    transition: box-shadow 0.2s;\n  }\n`;\n\nexport const BtnWrapper = styled.div`\n  display: flex;\n  column-gap: 14px;\n  margin-bottom: 14px;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const TextDiv = styled.div`\n  margin-top: 14px;\n  margin-bottom: 14px;\n  text-align: center;\n  color: #343434;\n  font-family: Inter;\n  font-size: 14px;\n  font-weight: 600;\n  padding: 14px 0;\n`;\n","import { ConfirmBtn, BtnWrapper, TextDiv } from './InfoModal.styled';\n// import Checkmark from 'components/TaskForm/Checkmark/Checkmark';\n// import { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectTheme } from 'redux/header/headerSlice';\n\nconst InfoModal = ({ message, closeModal }) => {\n  const theme = useSelector(selectTheme);\n\n  const handleClick = () => {\n    closeModal();\n  };\n\n  return (\n    <>\n      <>\n        <TextDiv\n          style={theme === 'dark' ? { color: '#fff' } : { color: '#000' }}\n        >\n          {message}\n        </TextDiv>\n        <BtnWrapper>\n          <ConfirmBtn onClick={handleClick}>OK</ConfirmBtn>\n        </BtnWrapper>\n      </>\n    </>\n  );\n};\n\nexport default InfoModal;\n","import styled from '@emotion/styled';\n\nexport const ModalBackdrop = styled.div`\n  position: fixed;\n  z-index: 4;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100vh;\n\n  background-color: #f7f6f960;\n`;\n\nexport const ModalContainer = styled.div`\n  position: fixed;\n  z-index: 5;\n  box-sizing: border-box;\n  min-width: 240px;\n  padding: 14px;\n  top: 50%;\n  left: 50%;\n\n  transform: translate(-50%, -50%);\n  background-color: ${({ bg }) => bg || '#fff'};\n  border-radius: 8px;\n  border: 1px solid rgba(220, 227, 229, 0.8);\n  box-shadow: 0px 4px 16px 0px rgba(17, 17, 17, 0.1);\n\n  @media screen and (max-width: 767px) {\n    max-width: 365px;\n  }\n\n  @media screen and (min-width: 768px) {\n    max-width: 468px;\n    padding: 18px;\n  }\n`;\n\nexport const CloseBtnContainer = styled.div`\n  text-align: right;\n`;\n\nexport const CloseBtn = styled.button`\n  padding: 0;\n  border: 0;\n  margin: 0;\n  width: 24px;\n  height: 24px;\n  /* background-color: white; */\n  background-color: ${({ bg }) => bg || '#fff'};\n  cursor: pointer;\n  &:hover {\n    box-shadow: 0px 4px 16px 0px rgba(17, 17, 17, 0.1);\n  }\n`;\n","import React, { useEffect } from 'react';\n\nimport PropTypes from 'prop-types';\nimport {\n  ModalBackdrop,\n  ModalContainer,\n  CloseBtnContainer,\n  CloseBtn,\n} from './Modal.styled';\nimport sprite from '../Pictures/sprite.svg';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectTheme } from 'redux/header/headerSlice';\n\nconst Modal = ({ closeModal, children }) => {\n  const dispatch = useDispatch();\n  const theme = useSelector(selectTheme);\n  useEffect(() => {\n    document.body.style.overflow = 'hidden';\n\n    const handleKeyDown = event => {\n      if (event.code === 'Escape') {\n        closeModal();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.body.style.overflow = 'unset';\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [dispatch, closeModal]);\n\n  return (\n    <ModalBackdrop\n      onClick={() => {\n        closeModal();\n      }}\n    >\n      <ModalContainer\n        onClick={e => e.stopPropagation()}\n        bg={theme !== 'dark' ? '#fff' : 'var(--color-theme-dark)'}\n      >\n        <CloseBtnContainer onClick={closeModal}>\n          <CloseBtn bg={theme !== 'dark' ? '#fff' : 'var(--color-theme-dark)'}>\n            <svg\n              width=\"24\"\n              height=\"24\"\n              stroke={theme === 'dark' ? '#fff' : '#000'}\n            >\n              <use href={sprite + '#close-btn'}></use>\n            </svg>\n          </CloseBtn>\n        </CloseBtnContainer>\n        {children}\n      </ModalContainer>\n    </ModalBackdrop>\n  );\n};\n\nModal.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  children: PropTypes.object.isRequired,\n};\n\nexport default Modal;\n","import styled from '@emotion/styled';\nimport { Field, Form } from 'formik';\nimport { NavLink } from 'react-router-dom';\n\nconst styledForm = Form;\nconst styledField = Field;\nconst navLink = NavLink;\n\nexport const PageContainer = styled.div`\n  position: relative;\n  height: 100vh;\n  padding-left: 20px;\n  padding-right: 20px;\n  margin-left: auto;\n  margin-right: auto;\n  background-color: #dcebf7;\n  overflow: hidden;\n`;\n\nexport const FormPosition = styled.div`\n  width: 100%;\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`;\n\nexport const RegisterContainer = styled.div`\n  padding: 24px 24px;\n  margin-left: auto;\n  margin-right: auto;\n  background-color: #ffffff;\n  border-radius: 8px;\n  @media screen and (min-width: 335px) and (max-width: 767px) {\n    box-sizing: border-box;\n    max-width: 335px;\n  }\n  @media screen and (min-width: 768px) {\n    box-sizing: border-box;\n    max-width: 480px;\n    padding: 40px 40px;\n  }\n`;\n\nexport const FormTitle = styled.h1`\n  margin-bottom: 32px;\n  font-family: Inter;\n  font-size: 18px;\n  font-weight: 600;\n  line-height: 1.33;\n  color: #3e85f3;\n\n  @media screen and (min-width: 768px) {\n    margin-bottom: 40px;\n    font-size: 24px;\n  }\n`;\n\nexport const BoxInput = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 24px;\n  position: relative;\n`;\n\nexport const FormStyled = styled(styledForm)`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const FormLabel = styled.label`\n  margin-bottom: 8px;\n  font-family: Inter;\n  font-size: 12px;\n  font-weight: 600;\n  line-height: 1.29;\n  color: #111111;\n  \n  @media screen and (min-width: 768px) {\n    font-size: 14px;\n  }\n`;\n\nexport const FormField = styled(styledField)`\n  padding-top: 14px;\n  padding-bottom: 14px;\n  padding-left: 14px;\n  margin-bottom: 4px;\n  font-family: Inter;\n  font-size: 14px;\n  font-weight: 400;\n  color: #111111;\n  background-color: #FFFFFF;\n  border-radius: 8px;\n  border: 1px solid #dce3e599;   \n  \n\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n    margin-bottom: 8px;\n  }\n\n  ::placeholder {\n    color: #dce3e5;\n  }\n`;\n\nexport const CorrectInput = styled.p`\n  font-family: Inter;\n  font-size: 12px;\n  font-weight: 400;\n  color: #3cbc81;\n`;\n\nexport const Error = styled.p`\n  font-family: Inter;\n  font-size: 12px;\n  font-weight: 400;\n  color: #e74a3b;\n\n  @media screen and (min-width: 768px) {\n    font-size: 14px;\n  }\n`;\n\nexport const InputIconName = styled.div`\n  position: absolute;\n  top: 40%;\n  left: 88%;\n`;\n\nexport const InputIconEmail = styled.div`\n  position: absolute;\n  top: 40%;\n  left: 88%;\n`;\n\nexport const InputIconPassword = styled.div`\n  position: absolute;\n  top: 40%;\n  left: 88%;\n`;\n\nexport const RegButton = styled.button`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 8px;\n  padding: 14px 0;\n  border: 1px solid transparent;\n  border-radius: 16px;\n  box-shadow: 4px 2px 16px 0px rgba(136, 165, 191, 0.48);\n  font-size: 14px;\n  background-color: #3e85f3;\n  color: #ffffff;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #2b78ef;\n  }\n  &:focus {\n    background-color: #2b78ef;\n  }\n\n  @media screen and (min-width: 768px) {\n    margin-top: 30px;\n    font-size: 18px;\n  }\n`;\n\nexport const GoogleBtn = styled.button`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 8px;\n  padding: 14px 0;\n  border: 1px solid transparent;\n  border-radius: 16px;\n  box-shadow: 4px 2px 16px 0px rgba(136, 165, 191, 0.48);\n  font-size: 14px;\n  background-color: #3e85f3;\n  color: #ffffff;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #2b78ef;\n  }\n  &:focus {\n    background-color: #2b78ef;\n  }\n\n  @media screen and (min-width: 768px) {\n    margin-top: 15px;\n    font-size: 18px;\n  }\n`;\n\nexport const LogIn = styled(navLink)`\n  display: block;\n  margin-top: 18px;\n  text-align: center;\n  font-family: Inter;\n  font-size: 12px;\n  font-weight: 600;\n  line-height: 1.17;\n  color: #3e85f3;\n  text-decoration: underline;\n\n  @media screen and (min-width: 768px) {\n    font-size: 18px;\n  }\n`;\n\nexport const ImagePosition = styled.div`\n  position: relative;\n  max-width: 480px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const Image = styled.img`\n  @media screen and (max-width: 1439px) {\n    display: none;\n  }\n\n  @media screen and (min-width: 1440px) {\n    position: absolute;\n    bottom: -90px;\n    right: 520px;\n    width: 368px;\n    height: auto;\n    overflow: hidden;\n  }\n`;\n","import { Formik } from 'formik';\nimport { FiLogIn } from 'react-icons/fi';\nimport { MdErrorOutline } from 'react-icons/md';\nimport { AiOutlineCheckCircle } from 'react-icons/ai';\nimport {\n  Error,\n  FormField,\n  FormLabel,\n  FormStyled,\n  FormTitle,\n  LogIn,\n  RegButton,\n  RegisterContainer,\n  BoxInput,\n  Image,\n  FormPosition,\n  PageContainer,\n  ImagePosition,\n  CorrectInput,\n  InputIconName,\n  InputIconEmail,\n  InputIconPassword,\n  GoogleBtn,\n} from './RegisterForm.styled';\nimport * as Yup from 'yup';\nimport { GoogleAuthProvider, getAuth, signInWithPopup } from 'firebase/auth';\nimport { app } from '../../redux/auth/firebase';\n\nimport IMG from '../Pictures/singup_goose.jpg';\n\nimport { register } from 'redux/auth/authOperations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectError, selectIsLoading } from 'redux/auth/authSelectors';\nimport { Circles } from 'react-loader-spinner';\nimport { useState } from 'react';\nimport Modal from 'components/Modal/Modal';\nimport InfoModal from 'components/InfoModal/InfoModal';\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const regError = useSelector(selectError);\n  const [isGoogle, setIsGoogle] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n\n  const closeModal = () => setShowModal(false);\n\n  const message =\n    'To complete the registration process, please check your mailbox';\n\n  let userSchema = Yup.object().shape({\n    username: Yup.string()\n      .trim()\n      .min(4, 'Name is too short - should be 4 chars minimum.')\n      .max(20, 'Name is too long - should be 20 chars maximum.')\n      .required('Name is required field'),\n    email: Yup.string()\n      .trim()\n      .matches(\n        /^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/,\n        'Invalid email. Valid email contain xxx@xxx.xxx'\n      )\n      .required('Email is required field'),\n    password: Yup.string()\n      .trim()\n      .min(8, 'Password should be 8 chars minimum.')\n      .max(20, 'Password should be 20 chars maximum')\n      .required('Password is required field'),\n  });\n\n  const GoogleAuth = async () => {\n    const auth = getAuth(app);\n    const googleAuthProvider = new GoogleAuthProvider().addScope('email');\n    try {\n      const { user } = await signInWithPopup(auth, googleAuthProvider);\n      const googleUser = {\n        username: user.providerData[0].displayName,\n        email: user.providerData[0].email,\n        password: user.providerData[0].uid,\n        token: user.accessToken,\n      };\n      dispatch(register(googleUser));\n      setShowModal(true);\n      setIsGoogle(true);\n      //\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const onSubmit = (values, { resetForm }) => {\n    dispatch(register(values));\n    setShowModal(true);\n    setIsGoogle(false);\n\n    resetForm();\n  };\n\n  return (\n    <PageContainer>\n      <FormPosition>\n        <RegisterContainer>\n          <FormTitle>Sign Up</FormTitle>\n          <Formik\n            initialValues={{ username: '', email: '', password: '' }}\n            validationSchema={userSchema}\n            validateOnBlur={false}\n            validateOnChange={false}\n            onSubmit={async (values, API) => {\n              onSubmit(values, API);\n            }}\n          >\n            {({ errors, isValid }) => (\n              <FormStyled>\n                <BoxInput>\n                  {!isValid ? (\n                    <FormLabel\n                      style={\n                        errors.username\n                          ? { color: '#E74A3B' }\n                          : { color: '#3CBC81' }\n                      }\n                      htmlFor=\"username\"\n                    >\n                      Name\n                    </FormLabel>\n                  ) : (\n                    <FormLabel htmlFor=\"username\">Name</FormLabel>\n                  )}\n\n                  {!isValid ? (\n                    <>\n                      <FormField\n                        style={\n                          errors.username\n                            ? { borderColor: '#E74A3B', position: 'relative' }\n                            : { borderColor: '#3CBC81', position: 'relative' }\n                        }\n                        id=\"username\"\n                        type=\"text\"\n                        name=\"username\"\n                        placeholder=\"Enter your name\"\n                        aria-required=\"true\"\n                        aria-invalid={!!errors.username}\n                        aria-describedby=\"usernameError\"\n                      />\n                      {errors.username ? (\n                        <>\n                          <Error id=\"usernameError\">{errors.username}</Error>\n                          <InputIconName>\n                            <MdErrorOutline size={24} color=\"#E74A3B\" />\n                          </InputIconName>\n                        </>\n                      ) : (\n                        <>\n                          <CorrectInput>This is a CORRECT name</CorrectInput>\n                          <InputIconName>\n                            <AiOutlineCheckCircle size={24} color=\"#3CBC81\" />\n                          </InputIconName>\n                        </>\n                      )}\n                    </>\n                  ) : (\n                    <>\n                      <FormField\n                        id=\"username\"\n                        type=\"text\"\n                        name=\"username\"\n                        placeholder=\"Enter your name\"\n                        aria-required=\"true\"\n                        aria-invalid={!!errors.username}\n                        aria-describedby=\"usernameError\"\n                      />\n                    </>\n                  )}\n                </BoxInput>\n\n                <BoxInput>\n                  {!isValid ? (\n                    <FormLabel\n                      style={\n                        errors.email\n                          ? { color: '#E74A3B' }\n                          : { color: '#3CBC81' }\n                      }\n                      htmlFor=\"email\"\n                    >\n                      Email\n                    </FormLabel>\n                  ) : (\n                    <FormLabel htmlFor=\"email\">Email</FormLabel>\n                  )}\n\n                  {!isValid ? (\n                    <>\n                      <FormField\n                        style={\n                          errors.email\n                            ? {\n                                borderColor: '#E74A3B',\n                                backgroundColor: '#FFFFFF',\n                                position: 'relative',\n                              }\n                            : {\n                                borderColor: '#3CBC81',\n                                backgroundColor: '#FFFFFF',\n                                position: 'relative',\n                              }\n                        }\n                        id=\"email\"\n                        type=\"text\"\n                        name=\"email\"\n                        placeholder=\"Enter email\"\n                        aria-required=\"true\"\n                        aria-invalid={!!errors.email}\n                        aria-describedby=\"emailError\"\n                      />\n                      {errors.email ? (\n                        <>\n                          <Error id=\"emailError\">{errors.email}</Error>\n                          <InputIconEmail>\n                            <MdErrorOutline size={24} color=\"#E74A3B\" />\n                          </InputIconEmail>\n                        </>\n                      ) : (\n                        <>\n                          <CorrectInput>This is a CORRECT email</CorrectInput>\n                          <InputIconEmail>\n                            <AiOutlineCheckCircle size={24} color=\"#3CBC81\" />\n                          </InputIconEmail>\n                        </>\n                      )}\n                    </>\n                  ) : (\n                    <>\n                      <FormField\n                        id=\"email\"\n                        type=\"text\"\n                        name=\"email\"\n                        placeholder=\"Enter email\"\n                        aria-required=\"true\"\n                        aria-invalid={!!errors.email}\n                        aria-describedby=\"emailError\"\n                      />\n                    </>\n                  )}\n                </BoxInput>\n\n                <BoxInput>\n                  {!isValid ? (\n                    <FormLabel\n                      style={\n                        errors.password\n                          ? { color: '#E74A3B' }\n                          : { color: '#3CBC81' }\n                      }\n                      htmlFor=\"password\"\n                    >\n                      Password\n                    </FormLabel>\n                  ) : (\n                    <FormLabel htmlFor=\"password\">Password</FormLabel>\n                  )}\n\n                  {!isValid ? (\n                    <>\n                      <FormField\n                        style={\n                          errors.password\n                            ? {\n                                borderColor: '#E74A3B',\n                                backgroundColor: '#FFFFFF',\n                                position: 'relative',\n                              }\n                            : {\n                                borderColor: '#3CBC81',\n                                backgroundColor: '#FFFFFF',\n                                position: 'relative',\n                              }\n                        }\n                        id=\"password\"\n                        type=\"password\"\n                        name=\"password\"\n                        placeholder=\"Enter password\"\n                        aria-required=\"true\"\n                        aria-invalid={!!errors.password}\n                        aria-describedby=\"passwordError\"\n                      />\n                      {errors.password ? (\n                        <>\n                          <Error id=\"passwordError\">{errors.password}</Error>\n                          <InputIconPassword>\n                            <MdErrorOutline size={24} color=\"#E74A3B\" />\n                          </InputIconPassword>\n                        </>\n                      ) : (\n                        <>\n                          <CorrectInput>\n                            This is a CORRECT password\n                          </CorrectInput>\n                          <InputIconPassword>\n                            <AiOutlineCheckCircle size={24} color=\"#3CBC81\" />\n                          </InputIconPassword>\n                        </>\n                      )}\n                    </>\n                  ) : (\n                    <>\n                      <FormField\n                        id=\"password\"\n                        type=\"password\"\n                        name=\"password\"\n                        placeholder=\"Enter password\"\n                        aria-required=\"true\"\n                        aria-invalid={!!errors.password}\n                        aria-describedby=\"passwordError\"\n                      />\n                    </>\n                  )}\n                </BoxInput>\n\n                {isLoading ? (\n                  <div style={{ marginLeft: 'auto', marginRight: 'auto' }}>\n                    <Circles\n                      height=\"80\"\n                      width=\"80\"\n                      color=\"#3E85F3\"\n                      ariaLabel=\"circles-loading\"\n                      wrapperStyle={{}}\n                      wrapperClass=\"\"\n                      visible={true}\n                    />\n                  </div>\n                ) : (\n                  <>\n                    <RegButton type=\"submit\" disabled={isLoading}>\n                      Sign up <FiLogIn style={{ marginLeft: 11 }} />\n                    </RegButton>\n                    <GoogleBtn\n                      type=\"button\"\n                      onClick={GoogleAuth}\n                      disabled={isLoading}\n                    >\n                      Sign up with Google 🚀{' '}\n                    </GoogleBtn>\n                  </>\n                )}\n              </FormStyled>\n            )}\n          </Formik>\n        </RegisterContainer>\n        <ImagePosition>\n          <LogIn to=\"/login\">Log In</LogIn>\n          <Image\n            srcSet={`\n            ${require('../Pictures/singup_goose.jpg')} 1x,\n            ${require('../Pictures/singup_goose2x.jpg')} 2x\n          `}\n            src={IMG}\n            alt=\"Goose\"\n          />\n        </ImagePosition>\n      </FormPosition>\n      {showModal && regError && !isLoading && (\n        <Modal closeModal={closeModal}>\n          <InfoModal message={regError} closeModal={closeModal}></InfoModal>\n        </Modal>\n      )}\n      {showModal && !regError && !isGoogle && !isLoading && (\n        <Modal closeModal={closeModal}>\n          <InfoModal message={message} closeModal={closeModal}></InfoModal>\n        </Modal>\n      )}\n    </PageContainer>\n  );\n};\n\nexport default RegisterForm;\n","import React from 'react';\n// import { Circles } from 'react-loader-spinner'; //! Спинер\nimport RegisterForm from '../../../components/RegisterForm/RegisterForm.jsx';\n\nconst RegisterPage = () => {\n  return <RegisterForm></RegisterForm>;\n};\n\nexport default RegisterPage;\n\n// {isLoading && !error && (\n//     <Circles\n//       height=\"80\"\n//       width=\"80\"\n//       color=\"#4d78a9\"\n//!       wrapperClass={css.loader}\n//     />\n//   )}\n\n// .loader {\n//     position: fixed;\n//     top: 0;\n//     width: 100%;\n//     height: 100%;\n//     display: flex;\n//     align-items: center;\n//     justify-content: center;\n//   }\n","import { initializeApp } from 'firebase/app';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBEgrHUWZSQaIHXbvdDYaU2gnwhximhORc\",\n  authDomain: 'goose-track-final-project-goit.firebaseapp.com',\n  projectId: 'goose-track-final-project-goit',\n  storageBucket: 'goose-track-final-project-goit.appspot.com',\n  messagingSenderId: '726960774734',\n  appId: '1:726960774734:web:576c405ee449fbe4e26d1f',\n};\n\n\nexport const app = initializeApp(firebaseConfig);\n"],"names":["ConfirmBtn","BtnWrapper","TextDiv","message","closeModal","theme","useSelector","selectTheme","style","color","onClick","ModalBackdrop","styled","ModalContainer","bg","CloseBtnContainer","CloseBtn","children","dispatch","useDispatch","useEffect","document","body","overflow","handleKeyDown","event","code","window","addEventListener","removeEventListener","e","stopPropagation","width","height","stroke","href","sprite","styledForm","Form","styledField","Field","navLink","NavLink","PageContainer","FormPosition","RegisterContainer","FormTitle","BoxInput","FormStyled","FormLabel","FormField","CorrectInput","Error","InputIconName","InputIconEmail","InputIconPassword","RegButton","GoogleBtn","LogIn","ImagePosition","Image","isLoading","selectIsLoading","regError","selectError","useState","isGoogle","setIsGoogle","showModal","setShowModal","userSchema","Yup","shape","username","trim","min","max","required","email","matches","password","GoogleAuth","auth","getAuth","app","googleAuthProvider","GoogleAuthProvider","addScope","signInWithPopup","user","googleUser","providerData","displayName","uid","token","accessToken","register","console","log","onSubmit","values","resetForm","initialValues","validationSchema","validateOnBlur","validateOnChange","API","errors","isValid","htmlFor","id","type","name","placeholder","borderColor","position","size","backgroundColor","marginLeft","marginRight","ariaLabel","wrapperStyle","wrapperClass","visible","disabled","to","srcSet","require","src","IMG","alt","Modal","InfoModal","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId"],"sourceRoot":""}