{"version":3,"file":"static/js/650.130a791e.chunk.js","mappings":"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","sources":["components/Statistics/StatisticsChart/StatisticsChart.jsx","components/Statistics/CalendarDate/CalendarDate.jsx","components/Statistics/PeriodPaginator/PeriodPaginator.jsx","pages/Private/StatisticsPage/StatisticsPage.jsx"],"sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  Bar,\n  BarChart,\n  CartesianGrid,\n  Legend,\n  Rectangle,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport { selectTasks } from 'redux/task/taskSelectors';\n// import { getTasks } from 'redux/task/tasksAPI';\n\nconst StatisticsChart = ({ today }) => {\n  const isTasks = useSelector(selectTasks);\n\n  const dateTask = isTasks.map(el => {\n    return el.date;\n  });\n  console.log('dateTask: ', dateTask);\n\n  const dataCurrentMonth = {\n    categoryTask: isTasks.map(task => task.category),\n  };\n  const todoByMonth = dataCurrentMonth.categoryTask.filter(el =>\n    el.includes('to-do')\n  ).length;\n  const inprogressByMonth = dataCurrentMonth.categoryTask.filter(el =>\n    el.includes('in-progress')\n  ).length;\n  const doneByMonth = dataCurrentMonth.categoryTask.filter(el =>\n    el.includes('done')\n  ).length;\n\n  const allTasksByMonth = todoByMonth + inprogressByMonth + doneByMonth;\n  const todoByMonthPercentages = (\n    (todoByMonth / allTasksByMonth) *\n    100\n  ).toFixed(0);\n  const inprogressByMonthPercentages = (\n    (inprogressByMonth / allTasksByMonth) *\n    100\n  ).toFixed(0);\n  const doneByMonthPercentages = (\n    (doneByMonth / allTasksByMonth) *\n    100\n  ).toFixed(0);\n\n  const data = [\n    {\n      name: 'To-Do',\n      uv: 50,\n      pv: todoByMonthPercentages,\n      amt: 100,\n    },\n    {\n      name: 'In-Progress',\n      uv: 50,\n      pv: inprogressByMonthPercentages,\n      amt: 100,\n    },\n    {\n      name: 'Done',\n      uv: 50,\n      pv: doneByMonthPercentages,\n      amt: 100,\n    },\n  ];\n\n  const renderCustomAxisTick = ({ x, y, payload }) => {\n    let path = '';\n\n    switch (payload.value) {\n      case 'To-Do':\n        path =\n          'M899.072 99.328q9.216 13.312 17.92 48.128t16.384 81.92 13.824 100.352 11.264 102.912 9.216 90.112 6.144 60.928q4.096 30.72 7.168 70.656t5.632 79.872 4.096 75.264 2.56 56.832q-13.312 16.384-30.208 25.6t-34.304 11.264-34.304-2.56-30.208-16.896q-1.024-10.24-3.584-33.28t-6.144-53.76-8.192-66.56-8.704-71.68q-11.264-83.968-23.552-184.32-7.168 37.888-11.264 74.752-4.096 31.744-6.656 66.56t-0.512 62.464q1.024 18.432 3.072 29.184t4.608 19.968 5.12 21.504 5.12 34.304 5.12 56.832 4.608 90.112q-11.264 24.576-50.688 42.496t-88.576 29.696-97.28 16.896-74.752 5.12q-18.432 0-46.08-2.56t-60.416-7.168-66.048-12.288-61.952-17.92-49.664-24.064-28.16-30.208q2.048-55.296 5.12-90.112t5.632-56.832 5.12-34.304 5.12-21.504 4.096-19.968 3.584-29.184q2.048-27.648-0.512-62.464t-6.656-66.56q-4.096-36.864-11.264-74.752-13.312 100.352-24.576 184.32-5.12 35.84-9.216 71.68t-8.192 66.56-6.656 53.76-2.56 33.28q-13.312 12.288-30.208 16.896t-34.304 2.56-33.792-11.264-29.696-25.6q0-21.504 2.048-56.832t4.096-75.264 5.632-79.872 6.656-70.656q2.048-20.48 6.144-60.928t9.728-90.112 11.776-102.912 13.824-100.352 16.384-81.92 17.92-48.128q20.48-12.288 56.32-25.6t73.216-26.624 71.168-25.088 50.176-22.016q10.24 13.312 16.896 61.44t13.312 115.712 15.36 146.432 23.04 153.6l38.912-334.848-29.696-25.6 43.008-54.272 15.36 2.048 15.36-2.048 43.008 54.272-29.696 25.6 38.912 334.848q14.336-74.752 23.04-153.6t15.36-146.432 13.312-115.712 16.896-61.44q16.384 10.24 50.176 22.016t71.168 25.088 73.216 26.624 56.32 25.6';\n        break;\n      case 'In-Progress':\n        path =\n          'M662.528 451.584q10.24 5.12 30.208 16.384t46.08 31.744 57.856 52.736 65.024 80.896 67.072 115.2 64.512 154.624q-15.36 9.216-31.232 21.504t-31.232 22.016-31.744 15.36-32.768 2.56q-44.032-9.216-78.336-8.192t-62.976 7.68-53.248 16.896-47.616 19.968-46.08 16.384-49.664 6.656q-57.344-1.024-110.592-16.896t-101.376-32.256-89.6-25.088-75.264 4.608q-20.48 8.192-41.984 1.024t-38.912-18.432q-20.48-13.312-39.936-33.792 37.888-116.736 86.016-199.68t92.672-136.704 78.848-81.408 43.52-33.792q9.216-5.12 10.24-25.088t-1.024-40.448q-3.072-24.576-9.216-54.272l-150.528-302.08 180.224-29.696q27.648 52.224 53.76 79.36t50.176 36.864 45.568 5.12 39.936-17.92q43.008-30.72 80.896-103.424l181.248 29.696q-20.48 48.128-45.056 99.328-20.48 44.032-47.616 97.28t-57.856 105.472q-12.288 34.816-13.824 57.344t1.536 36.864q4.096 16.384 12.288 25.6z';\n        break;\n      case 'Done':\n        path =\n          'M662.528 451.584q10.24 5.12 30.208 16.384t46.08 31.744 57.856 52.736 65.024 80.896 67.072 115.2 64.512 154.624q-15.36 9.216-31.232 21.504t-31.232 22.016-31.744 15.36-32.768 2.56q-44.032-9.216-78.336-8.192t-62.976 7.68-53.248 16.896-47.616 19.968-46.08 16.384-49.664 6.656q-57.344-1.024-110.592-16.896t-101.376-32.256-89.6-25.088-75.264 4.608q-20.48 8.192-41.984 1.024t-38.912-18.432q-20.48-13.312-39.936-33.792 37.888-116.736 86.016-199.68t92.672-136.704 78.848-81.408 43.52-33.792q9.216-5.12 10.24-25.088t-1.024-40.448q-3.072-24.576-9.216-54.272l-150.528-302.08 180.224-29.696q27.648 52.224 53.76 79.36t50.176 36.864 45.568 5.12 39.936-17.92q43.008-30.72 80.896-103.424l181.248 29.696q-20.48 48.128-45.056 99.328-20.48 44.032-47.616 97.28t-57.856 105.472q-12.288 34.816-13.824 57.344t1.536 36.864q4.096 16.384 12.288 25.6z';\n        break;\n      default:\n        path = '';\n    }\n\n    return (\n      <svg\n        x={x - 12}\n        y={y + 4}\n        width={24}\n        height={24}\n        viewBox=\"0 0 1024 1024\"\n        fill=\"#666\"\n      >\n        <path d={path} />\n      </svg>\n    );\n  };\n  const renderCustomBarLabelDay = ({ payload, x, y, width, height, value }) => {\n    return (\n      <text\n        x={x + width / 2}\n        y={y}\n        fill=\"#343434\"\n        textAnchor=\"middle\"\n        dy={-6}\n      >{`${todoByMonthPercentages}%`}</text>\n    );\n  };\n  const renderCustomBarLabelMonth = ({\n    payload,\n    x,\n    y,\n    width,\n    height,\n    value,\n  }) => {\n    return (\n      <text\n        x={x + width / 2}\n        y={y}\n        fill=\"#343434\"\n        textAnchor=\"middle\"\n        dy={-6}\n      >{`${todoByMonthPercentages}%`}</text>\n    );\n  };\n\n  return (\n    <BarChart\n      width={1100}\n      height={800}\n      data={data}\n      margin={{\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5,\n      }}\n    >\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis dataKey=\"name\" tick={renderCustomAxisTick} />\n      <YAxis dataKey=\"amt\" />\n      <Tooltip />\n      <Legend />\n      <Bar\n        dataKey=\"pv\"\n        fill=\"#82ca9d\"\n        activeBar={<Rectangle fill=\"pink\" stroke=\"blue\" />}\n        label={renderCustomBarLabelMonth}\n      />\n      <Bar\n        dataKey=\"uv\"\n        fill=\"#8884d8\"\n        activeBar={<Rectangle fill=\"gold\" stroke=\"purple\" />}\n        label={renderCustomBarLabelDay}\n      />\n    </BarChart>\n  );\n};\n\nexport default StatisticsChart;\n","import { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { format } from 'date-fns';\nimport DatePicker from 'react-date-picker';\nimport 'react-date-picker/dist/DatePicker.css';\nimport 'react-calendar/dist/Calendar.css';\n\nconst CalendarDate = ({ type, date }) => {\n  const navigate = useNavigate();\n  // const params = useParams();\n  // const isParams = Boolean(Object.keys(params).length);\n\n  const [dateValue, setDateValue] = useState(date);\n\n  useEffect(() => {\n    setDateValue(date);\n  }, [date]);\n\n  return (\n    <DatePicker\n      onChange={date => {\n        setDateValue(date);\n        const formattedDate = format(date, 'yyyy-MM-dd');\n        if (setDateValue) {\n          setDateValue(formattedDate);\n        }\n        navigate('/statistics');\n      }}\n      value={dateValue}\n      clearIcon={null}\n      format={'y-MM-dd'}\n      locale=\"en-US\"\n      showLeadingZeros={true}\n    />\n  );\n};\n\nexport default CalendarDate;\n","import { useSelector } from 'react-redux';\nimport { selectTheme } from 'redux/header/headerSlice';\nimport PropTypes from 'prop-types';\nimport { parse } from 'date-fns';\nimport { ChevronLeft, ChevronRight } from '../../Calendar/icons';\nimport CalendarDate from '../CalendarDate/CalendarDate';\nimport {\n  Wrapper,\n  ButtonsWrapper,\n  ButtonLeft,\n  ButtonRight,\n} from '../../Calendar/common/PeriodSelector.styled';\n\nconst PeriodPaginator = ({\n  onClickPrev,\n  onClickNext,\n  type,\n  onChangeType,\n  date,\n}) => {\n  const theme = useSelector(selectTheme);\n  const currentDate = parse(date, 'yyyy-MM-dd', new Date());\n\n  return (\n    <Wrapper>\n      <CalendarDate type={type} date={currentDate} />\n      {/* <CalendarDatePicker\n      type={type}\n      customInput={CustomInput} ===\n      onSelectDay={currentDate}\n      setCurrentDate={setCurrentDate} ===\n    /> */}\n      <ButtonsWrapper>\n        <ButtonLeft\n          onClick={() => {\n            onClickPrev(type);\n          }}\n          bgcolor={theme === 'dark' ? '#21222c' : '#ffffff'}\n          bordercolor={\n            theme === 'dark'\n              ? 'rgba(255, 255, 255, 0.15)'\n              : 'rgba(220, 227, 229, 0.80)'\n          }\n          color={theme === 'dark' ? '#ffffff' : '#343434'}\n          hovercolor={\n            theme === 'dark'\n              ? 'rgba(255, 255, 255, 0.15)'\n              : 'rgba(220, 227, 229, 1)'\n          }\n        >\n          <ChevronRight width=\"18px\" height=\"18px\" />\n        </ButtonLeft>\n\n        <ButtonRight\n          onClick={() => {\n            onClickNext(type);\n          }}\n          bgcolor={theme === 'dark' ? '#21222C' : '#ffffff'}\n          bordercolor={\n            theme === 'dark'\n              ? 'rgba(255, 255, 255, 0.15)'\n              : 'rgba(220, 227, 229, 0.80)'\n          }\n          color={theme === 'dark' ? '#ffffff' : '#343434'}\n          hovercolor={\n            theme === 'dark'\n              ? 'rgba(255, 255, 255, 0.15)'\n              : 'rgba(220, 227, 229, 1)'\n          }\n        >\n          <ChevronLeft width=\"18px\" height=\"18px\" />\n        </ButtonRight>\n      </ButtonsWrapper>\n    </Wrapper>\n  );\n};\n\nexport default PeriodPaginator;\n\nPeriodPaginator.propTypes = {\n  onClickPrev: PropTypes.func.isRequired,\n  onClickNext: PropTypes.func.isRequired,\n  type: PropTypes.string,\n  date: PropTypes.string,\n};\n","import React, { useEffect } from 'react';\n\nimport MainLayout from 'components/MainLayout/MainLayout';\nimport StatisticsChart from 'components/Statistics/StatisticsChart/StatisticsChart';\n// import Header from 'components/Header/Header';\nimport { getCurrentDate } from 'utils/calendar';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTasks } from 'redux/task/taskOperations';\nimport { HeaderContainer } from '../CalendarPage/CalendarPage.styled';\nimport Header from 'components/Header/Header';\nimport { selectTheme } from 'redux/header/headerSlice';\nimport { CalendarContainer } from 'components/Calendar/common';\nimport PeriodPaginator from 'components/Statistics/PeriodPaginator/PeriodPaginator';\n// import { addDays, addMonths, format, subDays, subMonths } from 'date-fns';\n\n// import { Link } from 'react-router-dom';\n// import { Circles } from 'react-loader-spinner'; //! Спинер\n\nconst StatisticsPage = () => {\n  const theme = useSelector(selectTheme);\n  const currentDay = getCurrentDate();\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getTasks(currentDay));\n  }, [dispatch, currentDay]);\n\n  // const handlePrev = () => {\n  //   if (pathname.includes('day')) {\n  //     const newDate = subDays(new Date(currentDate), 1);\n  //     navigate(`/calendar/day/${format(newDate, 'yyyy-MM-dd')}`);\n\n  //     return;\n  //   }\n\n  //   const newDate = subMonths(new Date(currentDate), 1);\n  //   navigate(`/calendar/month/${format(newDate, 'yyyy-MM-dd')}`);\n  // };\n\n  // const handleNext = () => {\n  //   if (pathname.includes('day')) {\n  //     const newDate = addDays(new Date(currentDate), 1);\n  //     navigate(`/calendar/day/${format(newDate, 'yyyy-MM-dd')}`);\n\n  //     return;\n  //   }\n\n  //   const newDate = addMonths(new Date(currentDate), 1);\n  //   navigate(`/calendar/month/${format(newDate, 'yyyy-MM-dd')}`);\n  // };\n\n  return (\n    <MainLayout>\n      <CalendarContainer bgcolor={theme === 'dark' ? '#171820' : '#f7f6f9'}>\n        <HeaderContainer>\n          <Header />\n        </HeaderContainer>\n        <PeriodPaginator date={currentDay} />\n        <div>\n          <div>{/* <h1>Statistics</h1> */}</div>\n          {/* <Header /> */}\n          <StatisticsChart today={currentDay} />\n          {/* <Suspense fallback={null}>\n          <CalendarToolbar\n            onClickPrev={handlePrev}\n            onClickNext={handleNext}\n            today={currentDate}\n          />\n        </Suspense> */}\n        </div>\n      </CalendarContainer>\n    </MainLayout>\n\n    // {isLoading && !error && (\n    //     <Circles\n    //       height=\"80\"\n    //       width=\"80\"\n    //       color=\"#4d78a9\"\n    //!       wrapperClass={css.loader}\n    //     />\n    //   )}\n  );\n};\n\nexport default StatisticsPage;\n\n// .loader {\n//     position: fixed;\n//     top: 0;\n//     width: 100%;\n//     height: 100%;\n//     display: flex;\n//     align-items: center;\n//     justify-content: center;\n//   }\n"],"names":["today","isTasks","useSelector","selectTasks","dateTask","map","el","date","console","log","dataCurrentMonth","categoryTask","task","category","todoByMonth","filter","includes","length","inprogressByMonth","doneByMonth","allTasksByMonth","todoByMonthPercentages","toFixed","inprogressByMonthPercentages","doneByMonthPercentages","data","name","uv","pv","amt","BarChart","width","height","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","tick","x","y","path","payload","value","viewBox","fill","d","YAxis","Tooltip","Legend","Bar","activeBar","Rectangle","stroke","label","textAnchor","dy","type","navigate","useNavigate","useState","dateValue","setDateValue","useEffect","onChange","formattedDate","format","clearIcon","locale","showLeadingZeros","onClickPrev","onClickNext","onChangeType","theme","selectTheme","currentDate","parse","Date","onClick","bgcolor","bordercolor","color","hovercolor","currentDay","getCurrentDate","dispatch","useDispatch","getTasks","MainLayout","Header"],"sourceRoot":""}