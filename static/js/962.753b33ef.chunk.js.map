{"version":3,"file":"static/js/962.753b33ef.chunk.js","mappings":"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","sources":["components/Statistics/CalendarDate/CalendarDate.jsx","components/Statistics/PeriodPaginator/PeriodPaginator.styled.jsx","components/Statistics/PeriodPaginator/PeriodPaginator.jsx","components/Statistics/StatisticsChart/StatisticsChart.styled.jsx","components/Statistics/StatisticsChart/StatisticsChart.jsx","pages/Private/StatisticsPage/StatisticsPage.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { format } from 'date-fns';\nimport ReactDatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker-cssmodules.css';\nimport {\n  DatePickerButton,\n  DatePickerWrapper,\n  CalendarGlobalStyles,\n} from 'components/Calendar/common/NewCalendarDatePicker.styled';\n\nconst CalendarDate = ({ date, setDate }) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleClick = () => setIsOpen(!isOpen);\n\n  return (\n    <DatePickerWrapper>\n      <DatePickerButton type=\"button\" onClick={handleClick}>\n        {format(date, 'd MMM y')}\n      </DatePickerButton>\n      {isOpen && (\n        <>\n          <ReactDatePicker\n            selected={date}\n            onChange={newDate => {\n              setDate(newDate);\n              handleClick();\n            }}\n            allowSameDay={true}\n            inline\n            calendarStartDay={1}\n            dateFormat={'dd MMMM yyyy'}\n            formatWeekDay={day => day.substring(0, 1)}\n          />\n          <CalendarGlobalStyles />\n        </>\n      )}\n    </DatePickerWrapper>\n  );\n};\n\nexport default CalendarDate;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  @media screen and (max-width: 767px) {\n    /* width: 65%; */\n  }\n  @media screen and (min-width: 768px) {\n    justify-content: flex-start;\n\n    margin-bottom: 40px;\n  }\n  @media screen and (max-width: 1440px) {\n    margin-bottom: 40px;\n  }\n`;\n\nexport const TitleWrapper = styled.button`\n  width: 195px;\n  padding: 6px 12px;\n  border-radius: 8px;\n  background-color: #3e85f3;\n  color: #ffffff;\n  font-size: 14px;\n  font-weight: 700;\n  line-height: calc(18 / 14);\n  text-align: center;\n  text-transform: uppercase;\n\n  @media screen and (min-width: 768px) {\n    justify-content: space-around;\n    align-items: center;\n    padding: 8px 12px;\n    font-size: 16px;\n  }\n`;\n\nexport const ButtonsWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 8px;\n`;\n\nexport const ButtonLeft = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 5px 8px;\n  border: 1px solid ${({ bordercolor }) => bordercolor};\n  border-radius: 8px;\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n  background-color: ${({ bgcolor }) => bgcolor};\n  color: ${({ color }) => color};\n  font-size: 20px;\n  cursor: pointer;\n  transition: color 250ms;\n\n  &:hover {\n    color: ${({ hovercolor }) => hovercolor};\n  }\n\n  @media screen and (min-width: 768px) {\n    padding: 7px 9px;\n  }\n`;\n\nexport const ButtonRight = styled(ButtonLeft)`\n  border-radius: 8px;\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n`;\n","import { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport CalendarDate from '../CalendarDate/CalendarDate';\nimport { selectTheme } from 'redux/header/headerSlice';\nimport { ChevronLeft, ChevronRight } from '../../Calendar/icons';\nimport {\n  Wrapper,\n  ButtonsWrapper,\n  ButtonLeft,\n  ButtonRight,\n} from '../PeriodPaginator/PeriodPaginator.styled';\n\nconst PeriodPaginator = ({ date, onClickPrev, onClickNext, setDate }) => {\n  const theme = useSelector(selectTheme);\n  return (\n    <Wrapper>\n      <CalendarDate date={date} setDate={setDate} />\n\n      <ButtonsWrapper>\n        <ButtonLeft\n          onClick={() => onClickPrev()}\n          bgcolor={theme === 'dark' ? '#21222c' : '#ffffff'}\n          bordercolor={\n            theme === 'dark'\n              ? 'rgba(255, 255, 255, 0.15)'\n              : 'rgba(220, 227, 229, 0.80)'\n          }\n          color={theme === 'dark' ? '#ffffff' : '#343434'}\n          hovercolor={\n            theme === 'dark'\n              ? 'rgba(255, 255, 255, 0.15)'\n              : 'rgba(220, 227, 229, 1)'\n          }\n        >\n          <ChevronRight width=\"18px\" height=\"18px\" />\n        </ButtonLeft>\n\n        <ButtonRight\n          onClick={() => onClickNext()}\n          bgcolor={theme === 'dark' ? '#21222C' : '#ffffff'}\n          bordercolor={\n            theme === 'dark'\n              ? 'rgba(255, 255, 255, 0.15)'\n              : 'rgba(220, 227, 229, 0.80)'\n          }\n          color={theme === 'dark' ? '#ffffff' : '#343434'}\n          hovercolor={\n            theme === 'dark'\n              ? 'rgba(255, 255, 255, 0.15)'\n              : 'rgba(220, 227, 229, 1)'\n          }\n        >\n          <ChevronLeft width=\"18px\" height=\"18px\" />\n        </ButtonRight>\n      </ButtonsWrapper>\n    </Wrapper>\n  );\n};\n\nexport default PeriodPaginator;\n\nPeriodPaginator.propTypes = {\n  // currentDateData: PropTypes.func,\n  // onClickPrev: PropTypes.func.isRequired,\n  // onClickNext: PropTypes.func.isRequired,\n  // type: PropTypes.string,\n  date: PropTypes.object,\n};\n","import styled from '@emotion/styled';\n\nexport const StatsPageBox = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  /* margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 46px; */\n  padding-top: 28px;\n  padding-left: 14px;\n  padding-right: 14px;\n  padding-bottom: 135px;\n  border-radius: 16px;\n\n  background-color: #ffffff;\n\n  @media screen and (min-width: 768px) {\n    padding-top: 132px;\n    padding-left: 32px;\n    padding-right: 32px;\n    padding-bottom: 224px;\n  }\n  @media screen and (min-width: 1440px) {\n    padding-top: 134px;\n    padding-right: 113px;\n    padding-left: 113px;\n    padding-bottom: 104px;\n  }\n`;\nexport const StatsContainer = styled.div`\n  /* margin-left: auto;\n  margin-right: auto; */\n  margin-top: 80px;\n\n  border: 0.8px solid #e3f3ff;\n  border-radius: 29px;\n  @media screen and (max-width: 768px) {\n    /* max-width: 307px; */\n    height: 413px;\n  }\n\n  @media screen and (min-width: 768px) {\n    max-width: 640px;\n    height: 424px;\n  }\n  @media screen and (min-width: 768px) {\n    max-width: 860px;\n    height: 440px;\n  }\n`;\nexport const WrapperDiagram = styled.svg`\n  max-width: 307px;\n  height: 413px;\n\n  @media screen and (max-width: 767px) {\n    max-width: 640px;\n    height: 424px;\n  }\n  @media screen and (min-width: 768px) {\n    max-width: 860px;\n    height: 440px;\n  }\n`;\n","import { useSelector } from 'react-redux';\nimport { format } from 'date-fns';\nimport PeriodPaginator from '../PeriodPaginator/PeriodPaginator';\n\nimport {\n  Bar,\n  BarChart,\n  CartesianGrid,\n  LabelList,\n  Legend,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport { selectTasks } from 'redux/task/taskSelectors';\nimport {\n  StatsContainer,\n  StatsPageBox,\n  // WrapperDiagram,\n} from './StatisticsChart.styled';\nimport { useState } from 'react';\n\nconst StatisticsChart = ({ date, onClickPrev, onClickNext, setDate }) => {\n  const isTasks = useSelector(selectTasks);\n\n  const parsedDate = format(date, 'yyyy-MM-dd');\n\n  const dateTask = isTasks\n    .filter(el => el.date === parsedDate)\n    .map(task => task.category);\n\n  const todoByDay = dateTask.filter(el => el.includes('to-do')).length;\n\n  const inprogressByDay = dateTask.filter(el =>\n    el.includes('in-progress')\n  ).length;\n\n  const doneByDay = dateTask.filter(el => el.includes('done')).length;\n\n  const allTasksByDay = todoByDay + inprogressByDay + doneByDay;\n\n  const todoByDayPercentages = Number(\n    ((todoByDay / allTasksByDay) * 100).toFixed(0)\n  );\n\n  const inprogressByDayPercentages = (\n    (inprogressByDay / allTasksByDay) *\n    100\n  ).toFixed(0);\n\n  const doneByDayPercentages = ((doneByDay / allTasksByDay) * 100).toFixed(0);\n\n  const dataCurrentMonth = {\n    categoryTask: isTasks.map(task => task.category),\n  };\n\n  const todoByMonth = dataCurrentMonth.categoryTask.filter(el =>\n    el.includes('to-do')\n  );\n\n  const inprogressByMonth = dataCurrentMonth.categoryTask.filter(el =>\n    el.includes('in-progress')\n  );\n\n  const doneByMonth = dataCurrentMonth.categoryTask.filter(el =>\n    el.includes('done')\n  );\n\n  const allTasksByMonth =\n    todoByMonth.length + inprogressByMonth.length + doneByMonth.length;\n\n  const todoByMonthPercentages = (\n    (todoByMonth.length / allTasksByMonth) *\n    100\n  ).toFixed(0);\n\n  const inprogressByMonthPercentages = (\n    (inprogressByMonth.length / allTasksByMonth) *\n    100\n  ).toFixed(0);\n\n  const doneByMonthPercentages = (\n    (doneByMonth.length / allTasksByMonth) *\n    100\n  ).toFixed(0);\n\n  const data = [\n    {\n      name: 'To Do',\n      'By Day': isNaN(todoByDayPercentages) === true ? 0 : todoByDayPercentages,\n      'By Month':\n        isNaN(todoByMonthPercentages) === true ? 0 : todoByMonthPercentages,\n    },\n    {\n      name: 'In Progress',\n      'By Day':\n        isNaN(inprogressByDayPercentages) === true\n          ? 0\n          : inprogressByDayPercentages,\n      'By Month':\n        isNaN(inprogressByMonthPercentages) === true\n          ? 0\n          : inprogressByMonthPercentages,\n    },\n    {\n      name: 'Done',\n      'By Day': isNaN(doneByDayPercentages) === true ? 0 : doneByDayPercentages,\n      'By Month':\n        isNaN(doneByMonthPercentages) === true ? 0 : doneByMonthPercentages,\n    },\n  ];\n\n  // function screenWidth() {\n  //   if (window.screen.width < 768) {\n  //     width: \"307\";\n  //   } else if (768 < window.screen.width < 1440) {\n  //     width: \"640\";\n  //   } else {\n  //     width: \"860\";\n  //   }\n  // }\n  const [width, setWidth] = useState(window.innerWidth / 1.5);\n  window.addEventListener(\n    'resize',\n    event => {\n      console.log(event.target);\n      setWidth(event.target.innerWidth / 1.5);\n    },\n    false\n  );\n\n  return (\n    <StatsPageBox>\n      <div>\n        <PeriodPaginator\n          onClickPrev={onClickPrev}\n          onClickNext={onClickNext}\n          setDate={setDate}\n          date={date}\n        />\n        <StatsContainer>\n          <BarChart\n            width={width}\n            height={440}\n            data={data}\n            margin={{ top: 77, right: 32, left: 32, bottom: 60 }}\n          >\n            <CartesianGrid vertical={false} stroke=\"#E3F3FF\" />\n            <XAxis\n              dataKey=\"name\"\n              axisLine={false}\n              tickLine={false}\n              fontSize={14}\n              fontFamily=\"Inter\"\n              tickMargin={20}\n            />\n            <YAxis\n              domain={[0, 100]}\n              tickCount={6}\n              axisLine={false}\n              tickLine={false}\n              label={{\n                value: 'Tasks',\n                position: 'top',\n                dx: -14,\n                dy: -24,\n                fontFamily: 'Inter',\n                fontSize: 14,\n                fontWeight: 600,\n                fill: '#343434',\n              }}\n              tickMargin={32}\n              fontFamily=\"Inter\"\n              fontSize={14}\n            />\n            <Legend\n              wrapperStyle={{\n                position: 'absolute',\n                top: -60,\n                right: 135,\n              }}\n              layout=\"horizontal\"\n              verticalAlign=\"top\"\n              align=\"end\"\n              iconSize={8}\n              iconType=\"circle\"\n              markerWidth={5}\n              fontSize={16}\n            />\n            <defs>\n              <linearGradient id=\"colorUv\" x1=\"0\" y1=\"1\" x2=\"0\" y2=\"0.2\">\n                <stop offset=\"30%\" stopColor=\"#FFD2DD\" stopOpacity={1} />\n                <stop offset=\"95%\" stopColor=\"#FFFFFF\" stopOpacity={0.8} />\n              </linearGradient>\n            </defs>\n            <defs>\n              <linearGradient id=\"colorXv\" x1=\"0\" y1=\"1\" x2=\"0\" y2=\"0.2\">\n                <stop offset=\"30%\" stopColor=\"#3E85F3\" stopOpacity={1} />\n                <stop offset=\"95%\" stopColor=\"#FFFFFF\" stopOpacity={0.8} />\n              </linearGradient>\n            </defs>\n            <Bar dataKey=\"By Day\" fill=\"url(#colorUv)\" barSize={22} radius={10}>\n              <LabelList\n                barCategoryGap={50}\n                dataKey=\"By Day\"\n                position=\"insideTop\"\n                fill=\"#343434\"\n                style={{ fontWeight: 500 }}\n              />\n            </Bar>\n            <Bar\n              dataKey=\"By Month\"\n              fill=\"url(#colorXv)\"\n              barSize={22}\n              radius={10}\n            >\n              <LabelList\n                dataKey=\"By Month\"\n                position=\"insideTop\"\n                fill=\"#343434\"\n                style={{ fontWeight: 500 }}\n              />\n            </Bar>\n          </BarChart>\n        </StatsContainer>\n      </div>\n    </StatsPageBox>\n  );\n};\n\nexport default StatisticsChart;\n","import { useEffect, useRef, useState } from 'react';\nimport { addDays, format, subDays } from 'date-fns';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport MainLayout from 'components/MainLayout/MainLayout';\nimport StatisticsChart from 'components/Statistics/StatisticsChart/StatisticsChart';\nimport { HeaderContainer } from '../CalendarPage/CalendarPage.styled';\nimport Header from 'components/Header/Header';\nimport { CalendarContainer } from 'components/Calendar/common';\n// import PeriodPaginator from 'components/Statistics/PeriodPaginator/PeriodPaginator';\n// import Header from 'components/Header/Header';\nimport { getTasks } from 'redux/task/taskOperations';\nimport { selectTheme } from 'redux/header/headerSlice';\n\n// import { Link } from 'react-router-dom';\n// import { Circles } from 'react-loader-spinner'; //! Спинер\n\nconst StatisticsPage = () => {\n  const dispatch = useDispatch();\n  const [date, setDate] = useState(new Date());\n\n  const prevMonthRef = useRef(null);\n\n  useEffect(() => {\n    const currentMonth = format(date, 'MM');\n    if (prevMonthRef.current === currentMonth) return;\n    prevMonthRef.current = currentMonth;\n    dispatch(getTasks(format(date, 'yyyy-MM-dd').slice(0, 7)));\n  }, [dispatch, date]);\n\n  const handlePrev = () => {\n    setDate(subDays(date, 1));\n  };\n\n  const handleNext = () => {\n    setDate(addDays(date, 1));\n  };\n\n  const theme = useSelector(selectTheme);\n  return (\n    <MainLayout>\n      <CalendarContainer bgcolor={theme === 'dark' ? '#171820' : '#f7f6f9'}>\n        <HeaderContainer>\n          <Header pageName=\"Statistics\" />\n        </HeaderContainer>\n\n        <StatisticsChart\n          onClickPrev={handlePrev}\n          onClickNext={handleNext}\n          setDate={setDate}\n          date={date}\n        ></StatisticsChart>\n      </CalendarContainer>\n    </MainLayout>\n\n    // {isLoading && !error && (\n    //     <Circles\n    //       height=\"80\"\n    //       width=\"80\"\n    //       color=\"#4d78a9\"\n    //!       wrapperClass={css.loader}\n    //     />\n    //   )}\n  );\n};\n\nexport default StatisticsPage;\n\n// .loader {\n//     position: fixed;\n//     top: 0;\n//     width: 100%;\n//     height: 100%;\n//     display: flex;\n//     align-items: center;\n//     justify-content: center;\n//   }\n"],"names":["date","setDate","useState","isOpen","setIsOpen","handleClick","type","onClick","format","selected","onChange","newDate","allowSameDay","inline","calendarStartDay","dateFormat","formatWeekDay","day","substring","Wrapper","styled","ButtonsWrapper","ButtonLeft","bordercolor","bgcolor","color","hovercolor","ButtonRight","onClickPrev","onClickNext","theme","useSelector","selectTheme","width","height","StatsPageBox","StatsContainer","isTasks","selectTasks","parsedDate","dateTask","filter","el","map","task","category","todoByDay","includes","length","inprogressByDay","doneByDay","allTasksByDay","todoByDayPercentages","Number","toFixed","inprogressByDayPercentages","doneByDayPercentages","dataCurrentMonth","categoryTask","todoByMonth","inprogressByMonth","doneByMonth","allTasksByMonth","todoByMonthPercentages","inprogressByMonthPercentages","doneByMonthPercentages","data","name","isNaN","window","innerWidth","setWidth","addEventListener","event","console","log","target","BarChart","margin","top","right","left","bottom","CartesianGrid","vertical","stroke","XAxis","dataKey","axisLine","tickLine","fontSize","fontFamily","tickMargin","YAxis","domain","tickCount","label","value","position","dx","dy","fontWeight","fill","Legend","wrapperStyle","layout","verticalAlign","align","iconSize","iconType","markerWidth","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","Bar","barSize","radius","LabelList","barCategoryGap","style","dispatch","useDispatch","Date","prevMonthRef","useRef","useEffect","currentMonth","current","getTasks","slice","MainLayout","Header","pageName","subDays","addDays"],"sourceRoot":""}