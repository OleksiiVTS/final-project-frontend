{"version":3,"file":"static/js/863.f57ab754.chunk.js","mappings":"6SA4FA,EA9EwB,WACtB,IAAMA,GAAUC,EAAAA,EAAAA,IAAYC,EAAAA,IAC5BC,QAAQC,IAAI,YAAaJ,GACzB,IAAMK,EAAeL,EAAQM,KAAI,SAAAC,GAC/B,OAAOA,EAAKC,QACb,IACDL,QAAQC,IAAI,iBAAkBC,GA2D9B,OACE,UAACI,EAAA,EAAD,CAAUC,MAAO,IAAKC,OAAQ,IAAKC,KA7CxB,CACX,CACEC,KAAM,SACNC,GAAI,IACJC,GAAI,KACJC,IAAK,MAEP,CACEH,KAAM,SACNC,GAAI,IACJC,GAAI,KACJC,IAAK,MAEP,CACEH,KAAM,SACNC,GAAI,IACJC,GAAI,KACJC,IAAK,MAEP,CACEH,KAAM,SACNC,GAAI,KACJC,GAAI,KACJC,IAAK,KAEP,CACEH,KAAM,SACNC,GAAI,KACJC,GAAI,KACJC,IAAK,MAEP,CACEH,KAAM,SACNC,GAAI,KACJC,GAAI,KACJC,IAAK,MAEP,CACEH,KAAM,SACNC,GAAI,KACJC,GAAI,KACJC,IAAK,OAIP,WACE,SAACC,EAAA,EAAD,CAAeC,gBAAgB,SAC/B,SAACC,EAAA,EAAD,CAAOC,QAAQ,UACf,SAACC,EAAA,EAAD,KACA,SAACC,EAAA,EAAD,KACA,SAACC,EAAA,EAAD,KACA,SAACC,EAAA,EAAD,CAAKJ,QAAQ,KAAKK,KAAK,aACvB,SAACD,EAAA,EAAD,CAAKJ,QAAQ,KAAKK,KAAK,cAG5B,E,oBCzCD,EArCuB,WACrB,IAAMC,GAAcC,EAAAA,EAAAA,MAAiBC,MAAM,EAAG,GAC9CzB,QAAQC,IAAI,gBAAiBsB,GAC7B,IAAMG,GAAWC,EAAAA,EAAAA,MAKjB,OAJAC,EAAAA,EAAAA,YAAU,WACRF,GAASG,EAAAA,EAAAA,IAASN,GACnB,GAAE,CAACG,EAAUH,KAGZ,SAACO,EAAA,EAAD,WACE,4BACE,0BACE,wBAAI,kBAGN,SAAC,EAAD,QAoBP,C,wGC/CM,IAAM/B,EAAc,SAAAgC,GAAK,OAAIA,EAAMC,MAAMA,KAAhB,EACnBC,EAAgB,SAAAF,GAAK,OAAIA,EAAMC,MAAME,KAAhB,EACrBC,EAAkB,SAAAJ,GAAK,OAAIA,EAAMC,MAAMI,SAAhB,C","sources":["components/Statistics/StatisticsChart.jsx","pages/Private/StatisticsPage/StatisticsPage.jsx","redux/task/taskSelectors.js"],"sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  Bar,\n  BarChart,\n  CartesianGrid,\n  Legend,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport { selectTasks } from 'redux/task/taskSelectors';\n// import { getTasks } from 'redux/task/tasksAPI';\n\nconst StatisticsChart = () => {\n  const isTasks = useSelector(selectTasks);\n  console.log('isTasks: ', isTasks);\n  const categoryTask = isTasks.map(task => {\n    return task.category;\n  });\n  console.log('categoryTask: ', categoryTask);\n\n  // const getTasksResp = async interval => {\n  //   const tasksMonth = await getTasks(interval);\n  //   console.log('tasksMonth: ', tasksMonth);\n\n  //   console.log('lengts: ', tasksMonth.length);\n  //   tasksMonth.map(task => console.log(task.category));\n  // };\n  // getTasksResp(2023);\n  // // const mapTask = () => {\n  //   getTasksResp(2023-10).map(task => console.log(task.category));\n\n  // }\n  // mapTask()\n  const data = [\n    {\n      name: 'Page A',\n      uv: 4000,\n      pv: 2400,\n      amt: 2400,\n    },\n    {\n      name: 'Page B',\n      uv: 3000,\n      pv: 1398,\n      amt: 2210,\n    },\n    {\n      name: 'Page C',\n      uv: 2000,\n      pv: 9800,\n      amt: 2290,\n    },\n    {\n      name: 'Page D',\n      uv: 2780,\n      pv: 3908,\n      amt: 2000,\n    },\n    {\n      name: 'Page E',\n      uv: 1890,\n      pv: 4800,\n      amt: 2181,\n    },\n    {\n      name: 'Page F',\n      uv: 2390,\n      pv: 3800,\n      amt: 2500,\n    },\n    {\n      name: 'Page G',\n      uv: 3490,\n      pv: 4300,\n      amt: 2100,\n    },\n  ];\n  return (\n    <BarChart width={900} height={600} data={data}>\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis dataKey=\"name\" />\n      <YAxis />\n      <Tooltip />\n      <Legend />\n      <Bar dataKey=\"pv\" fill=\"#82ca9d\" />\n      <Bar dataKey=\"uv\" fill=\"#82ca9d\" />\n    </BarChart>\n  );\n};\n\nexport default StatisticsChart;\n","import React, { useEffect } from 'react';\n\nimport MainLayout from 'components/MainLayout/MainLayout';\nimport StatisticsChart from 'components/Statistics/StatisticsChart';\n// import Header from 'components/Header/Header';\nimport { getCurrentDate } from 'utils/calendar';\nimport { useDispatch } from 'react-redux';\nimport { getTasks } from 'redux/task/taskOperations';\n\n// import { Link } from 'react-router-dom';\n// import { Circles } from 'react-loader-spinner'; //! Спинер\n\nconst StatisticsPage = () => {\n  const currentDate = getCurrentDate().slice(0, 7);\n  console.log('currentDate: ', currentDate);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getTasks(currentDate));\n  }, [dispatch, currentDate]);\n\n  return (\n    <MainLayout>\n      <div>\n        <div>\n          <h1>Statistics</h1>\n        </div>\n        {/* <Header /> */}\n        <StatisticsChart />\n        {/* <Suspense fallback={null}>\n          <CalendarToolbar\n            onClickPrev={handlePrev}\n            onClickNext={handleNext}\n            today={currentDate}\n          />\n        </Suspense> */}\n      </div>\n    </MainLayout>\n\n    // {isLoading && !error && (\n    //     <Circles\n    //       height=\"80\"\n    //       width=\"80\"\n    //       color=\"#4d78a9\"\n    //!       wrapperClass={css.loader}\n    //     />\n    //   )}\n  );\n};\n\nexport default StatisticsPage;\n\n// .loader {\n//     position: fixed;\n//     top: 0;\n//     width: 100%;\n//     height: 100%;\n//     display: flex;\n//     align-items: center;\n//     justify-content: center;\n//   }\n","export const selectTasks = state => state.tasks.tasks;\nexport const selectIsError = state => state.tasks.error;\nexport const selectIsLoading = state => state.tasks.isLoading;\n"],"names":["isTasks","useSelector","selectTasks","console","log","categoryTask","map","task","category","BarChart","width","height","data","name","uv","pv","amt","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","fill","currentDate","getCurrentDate","slice","dispatch","useDispatch","useEffect","getTasks","MainLayout","state","tasks","selectIsError","error","selectIsLoading","isLoading"],"sourceRoot":""}