{"version":3,"file":"static/js/539.809920b1.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.styled.jsx","components/LoginForm/LoginForm.jsx","pages/Public/LoginPage/LoginPage.jsx","redux/auth/firebase.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Field, Form } from 'formik';\nimport { NavLink } from 'react-router-dom';\n\nconst styledForm = Form;\nconst styledField = Field;\nconst navLink = NavLink;\n\nexport const PageContainer = styled.div`\n  position: relative;\n  height: 100vh;\n  padding-left: 20px;\n  padding-right: 20px;\n  margin-left: auto;\n  margin-right: auto;\n  background-color: #dcebf7;\n`;\n\nexport const FormPosition = styled.div`\n  width: 100%;\n  margin: 0;\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`;\n\nexport const LoginContainer = styled.div`\n  position: relative;\n  padding: 40px 24px;\n  margin-left: auto;\n  margin-right: auto;\n  background-color: #ffffff;\n  border-radius: 8px;\n  overflow: hidden;\n  @media screen and (min-width: 180px) and (max-width: 767px) {\n    box-sizing: border-box;\n    max-width: 335px;\n  }\n\n  @media screen and (min-width: 768px) {\n    box-sizing: border-box;\n    max-width: 480px;\n    padding: 40px 40px;\n  }\n`;\n\nexport const FormTitle = styled.h1`\n  margin-bottom: 32px;\n  font-family: Inter;\n  font-size: 18px;\n  font-weight: 600;\n  line-height: 1.33;\n  color: #3e85f3;\n\n  @media screen and (min-width: 768px) {\n    margin-bottom: 40px;\n    font-size: 24px;\n  }\n`;\n\nexport const FormStyled = styled(styledForm)`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const FormLabel = styled.label`\n  margin-bottom: 8px;\n  font-family: Inter;\n  font-size: 12px;\n  font-weight: 600;\n  line-height: 1.29;\n  color: #111111;\n\n  @media screen and (min-width: 768px) {\n    font-size: 14px;\n  }\n`;\n\nexport const BoxInput = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 24px;\n  position: relative;\n`;\n\nexport const FormField = styled(styledField)`\n  padding-top: 14px;\n  padding-bottom: 14px;\n  padding-left: 14px;\n  margin-bottom: 8px;\n  font-family: Inter;\n  font-size: 14px;\n  font-weight: 400;\n  color: #111111;\n  border-radius: 8px;\n  border: 1px solid #dce3e599;\n\n \n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n  }\n\n  ::placeholder {\n    color: #dce3e5;\n  }\n`;\n\nexport const InputIconEmail = styled.div`\n  position: absolute;\n  top: 40%;\n  left: 88%;\n`;\n\nexport const InputIconPassword = styled.div`\n  position: absolute;\n  top: 40%;\n  left: 88%;\n`;\n\nexport const CorrectInput = styled.p`\n  font-family: Inter;\n  font-size: 12px;\n  font-weight: 400;\n  color: #3cbc81;\n`;\n\nexport const Error = styled.p`\n  font-family: Inter;\n  font-size: 12px;\n  font-weight: 400;\n  color: red;\n\n  @media screen and (min-width: 768px) {\n    font-size: 14px;\n  }\n`;\n\nexport const LoginButton = styled.button`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 8px;\n  padding: 14px 0;\n  border-radius: 16px;\n  border: 1px solid transparent;\n  box-shadow: 4px 2px 16px 0px rgba(136, 165, 191, 0.48);\n  font-size: 14px;\n  background-color: #3e85f3;\n  color: #ffffff;\n  margin-left: auto;\n  margin-right: auto;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #2b78ef;\n  }\n  &:focus {\n    background-color: #2b78ef;\n  }\n\n  @media screen and (min-width: 768px) {\n    margin-top: 30px;\n    font-size: 18px;\n  }\n`;\n\nexport const GoogleBtn = styled.button`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 8px;\n  padding: 14px 0;\n  border: 1px solid transparent;\n  border-radius: 16px;\n  box-shadow: 4px 2px 16px 0px rgba(136, 165, 191, 0.48);\n  font-size: 14px;\n  background-color: #3e85f3;\n  color: #ffffff;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #2b78ef;\n  }\n  &:focus {\n    background-color: #2b78ef;\n  }\n\n  @media screen and (min-width: 768px) {\n    margin-top: 15px;\n    font-size: 18px;\n  }\n`;\n\nexport const ImagePosition = styled.div`\n  position: relative;\n  max-width: 480px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const SingUp = styled(navLink)`\n  display: block;\n  margin-top: 18px;\n  text-align: center;\n  font-family: Inter;\n  font-size: 12px;\n  font-weight: 600;\n  line-height: 1.17;\n  color: #3e85f3;\n  text-decoration: underline;\n\n  @media screen and (min-width: 768px) {\n    font-size: 18px;\n  }\n`;\n\nexport const Image = styled.img`\n  @media screen and (max-width: 1439px) {\n    display: none;\n  }\n\n  @media screen and (min-width: 1440px) {\n    position: absolute;\n    bottom: -100px;\n    left: 500px;\n    width: 368px;\n    height: 521px;\n  }\n`;\n","import React from 'react';\nimport { Formik } from 'formik';\nimport {\n  BoxInput,\n  Error,\n  FormField,\n  FormLabel,\n  FormPosition,\n  FormStyled,\n  FormTitle,\n  Image,\n  LoginButton,\n  LoginContainer,\n  PageContainer,\n  SingUp,\n  ImagePosition,\n  CorrectInput,\n  InputIconEmail,\n  InputIconPassword,\n  GoogleBtn,\n} from './LoginForm.styled';\nimport { MdErrorOutline } from 'react-icons/md';\nimport { AiOutlineCheckCircle } from 'react-icons/ai';\nimport { FiLogIn } from 'react-icons/fi';\nimport * as Yup from 'yup';\nimport { GoogleAuthProvider, getAuth, signInWithPopup } from 'firebase/auth';\nimport { app } from '../../redux/auth/firebase';\n\nimport IMG from '../Pictures/login_goose.jpg';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login } from 'redux/auth/authOperations';\nimport { selectIsLoading } from 'redux/auth/authSelectors';\nimport Loader from 'components/Loader';\nimport { toast } from 'react-toastify';\n\nconst LoginForm = () => {\n  const dispacth = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n\n  let userSchema = Yup.object().shape({\n    email: Yup.string()\n      .trim()\n      .matches(\n        /^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/,\n        'Invalid email. Valid email contain xxx@xxx.xxx'\n      )\n      .required('Email is required field'),\n    password: Yup.string()\n      .trim()\n      .min(8, 'Password should be 6 chars minimum.')\n      .max(20, 'Password should be 20 chars maximum')\n      .required('Password is required field')\n  });\n\n  const GoogleAuth = async () => {\n    const auth = getAuth(app);\n    const googleAuthProvider = new GoogleAuthProvider().addScope(\"email\");\n    try {\n      const result = await signInWithPopup(auth, googleAuthProvider);      \n      const googleUser = {\n        email: result.user.providerData[0].email,\n        password: result.user.providerData[0].uid,\n      };\n      dispacth(login(googleUser));\n    } catch (error) {}\n  };  \n  \n\n  return (\n    <PageContainer>\n      <FormPosition>\n        <LoginContainer>\n          <FormTitle>Log In</FormTitle>\n          <Formik\n            initialValues={{ email: '', password: '' }}\n            validationSchema={userSchema}\n            validateOnChange={false}\n            validateOnBlur={false}            \n            onSubmit={async values => {\n              try {\n                dispacth(login(values));\n              } catch (error) {\n                toast.error(error.message);\n              }\n            }}\n          >\n            {({ errors, isValid }) => (\n              <FormStyled>\n                <BoxInput>\n                  {!isValid ? (\n                    <FormLabel\n                      style={\n                        errors.email\n                          ? { color: '#E74A3B' }\n                          : { color: '#3CBC81' }\n                      }\n                      htmlFor=\"email\"\n                    >\n                      Email\n                    </FormLabel>\n                  ) : (\n                    <FormLabel htmlFor=\"email\">Email</FormLabel>\n                  )}\n\n                  {!isValid ? (\n                    <>\n                      <FormField\n                        style={\n                          errors.email\n                            ? {\n                                borderColor: '#E74A3B',\n                                backgroundColor: '#FFFFFF',\n                                position: 'relative',\n                              }\n                            : {\n                                borderColor: '#3CBC81',\n                                backgroundColor: '#FFFFFF',\n                                position: 'relative',\n                              }\n                        }\n                        id=\"email\"\n                        type=\"text\"\n                        name=\"email\"\n                        placeholder=\"Enter email\"\n                        aria-required=\"true\"\n                        aria-invalid={!!errors.email}\n                        aria-describedby=\"emailError\"\n                      />\n                      {errors.email ? (\n                        <>\n                          <Error id=\"emailError\">{errors.email}</Error>\n                          <InputIconEmail>\n                            <MdErrorOutline size={24} color=\"#E74A3B\" />\n                          </InputIconEmail>\n                        </>\n                      ) : (\n                        <>\n                          <CorrectInput>This is a CORRECT email</CorrectInput>\n                          <InputIconEmail>\n                            <AiOutlineCheckCircle size={24} color=\"#3CBC81\" />\n                          </InputIconEmail>\n                        </>\n                      )}\n                    </>\n                  ) : (\n                    <>\n                      <FormField\n                        id=\"email\"\n                        type=\"text\"\n                        name=\"email\"\n                        placeholder=\"Enter email\"\n                        aria-required=\"true\"\n                        aria-invalid={!!errors.email}\n                        aria-describedby=\"emailError\"\n                      />\n                    </>\n                  )}\n                </BoxInput>\n\n                <BoxInput>\n                  {!isValid ? (\n                    <FormLabel\n                      style={\n                        errors.password\n                          ? { color: '#E74A3B' }\n                          : { color: '#3CBC81' }\n                      }\n                      htmlFor=\"password\"\n                    >\n                      Password\n                    </FormLabel>\n                  ) : (\n                    <FormLabel htmlFor=\"password\">Password</FormLabel>\n                  )}\n                  {!isValid ? (\n                    <>\n                      <FormField\n                        style={\n                          errors.password\n                            ? {\n                                borderColor: '#E74A3B',\n                                backgroundColor: '#FFFFFF',\n                                position: 'relative',\n                              }\n                            : {\n                                borderColor: '#3CBC81',\n                                backgroundColor: '#FFFFFF',\n                                position: 'relative',\n                              }\n                        }\n                        id=\"password\"\n                        type=\"password\"\n                        name=\"password\"\n                        placeholder=\"Enter password\"\n                        aria-required=\"true\"\n                        aria-invalid={!!errors.password}\n                        aria-describedby=\"passwordError\"\n                      />\n                      {errors.password ? (\n                        <>\n                          <Error id=\"passwordError\">{errors.password}</Error>\n                          <InputIconPassword>\n                            <MdErrorOutline size={24} color=\"#E74A3B\" />\n                          </InputIconPassword>\n                        </>\n                      ) : (\n                        <>\n                          <CorrectInput>\n                            This is a CORRECT password\n                          </CorrectInput>\n                          <InputIconPassword>\n                            <AiOutlineCheckCircle size={24} color=\"#3CBC81\" />\n                          </InputIconPassword>\n                        </>\n                      )}\n                    </>\n                  ) : (\n                    <>\n                      <FormField\n                        id=\"password\"\n                        type=\"password\"\n                        name=\"password\"\n                        placeholder=\"Enter password\"\n                        aria-required=\"true\"\n                        aria-invalid={!!errors.password}\n                        aria-describedby=\"passwordError\"\n                      />\n                    </>\n                  )}\n                </BoxInput>\n\n                {isLoading ? (\n                  <>\n                    <LoginButton type=\"submit\" disabled={isLoading}>\n                      Log in <FiLogIn style={{ marginLeft: 11 }} />\n                      <Loader />\n                    </LoginButton>\n                    <GoogleBtn type=\"button\" onClick={GoogleAuth}>\n                      Sign in with Google 🚀{' '}\n                    </GoogleBtn>\n                  </>\n                ) : (\n                  <>\n                    <LoginButton type=\"submit\" disabled={isLoading}>\n                      Log in <FiLogIn style={{ marginLeft: 11 }} />\n                    </LoginButton>\n                    <GoogleBtn\n                      type=\"button\"\n                      onClick={GoogleAuth}\n                      disabled={isLoading}\n                    >\n                      Sign in with Google 🚀{' '}\n                    </GoogleBtn>\n                  </>\n                )}\n              </FormStyled>\n            )}\n          </Formik>\n        </LoginContainer>\n        <ImagePosition>\n          <SingUp to=\"/register\">Sing up</SingUp>\n          <Image\n            srcSet={`\n            ${require('../Pictures/login_goose.jpg')} 1x,\n            ${require('../Pictures/login_goose@2x.jpg')} 2x\n            `}\n            src={IMG}\n            alt=\"Goose\"\n          />\n        </ImagePosition>\n      </FormPosition>\n    </PageContainer>\n  );\n};\n\nexport default LoginForm;\n","import React from 'react';\n// import { Circles } from 'react-loader-spinner'; //! Спинер\n\nimport LoginForm from '../../../components/LoginForm/LoginForm.jsx';\n\nconst LoginPage = () => {\n  return <LoginForm></LoginForm>;\n};\n\nexport default LoginPage;\n\n// {isLoading && !error && (\n//     <Circles\n//       height=\"80\"\n//       width=\"80\"\n//       color=\"#4d78a9\"\n//!       wrapperClass={css.loader}\n//     />\n//   )}\n\n// .loader {\n//     position: fixed;\n//     top: 0;\n//     width: 100%;\n//     height: 100%;\n//     display: flex;\n//     align-items: center;\n//     justify-content: center;\n//   }\n","import { initializeApp } from 'firebase/app';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBEgrHUWZSQaIHXbvdDYaU2gnwhximhORc\",\n  authDomain: 'goose-track-final-project-goit.firebaseapp.com',\n  projectId: 'goose-track-final-project-goit',\n  storageBucket: 'goose-track-final-project-goit.appspot.com',\n  messagingSenderId: '726960774734',\n  appId: '1:726960774734:web:576c405ee449fbe4e26d1f',\n};\n\n\nexport const app = initializeApp(firebaseConfig);\n"],"names":["styledForm","Form","styledField","Field","navLink","NavLink","PageContainer","styled","FormPosition","LoginContainer","FormTitle","FormStyled","FormLabel","BoxInput","FormField","InputIconEmail","InputIconPassword","CorrectInput","Error","LoginButton","GoogleBtn","ImagePosition","SingUp","Image","dispacth","useDispatch","isLoading","useSelector","selectIsLoading","userSchema","Yup","shape","email","trim","matches","required","password","min","max","GoogleAuth","auth","getAuth","app","googleAuthProvider","GoogleAuthProvider","addScope","signInWithPopup","result","googleUser","user","providerData","uid","login","initialValues","validationSchema","validateOnChange","validateOnBlur","onSubmit","values","error","toast","message","errors","isValid","htmlFor","style","color","id","type","name","placeholder","borderColor","backgroundColor","position","size","disabled","marginLeft","Loader","onClick","to","srcSet","require","src","IMG","alt","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId"],"sourceRoot":""}