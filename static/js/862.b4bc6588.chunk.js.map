{"version":3,"file":"static/js/862.b4bc6588.chunk.js","mappings":"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","sources":["components/Statistics/StatisticsChart/StatisticsChart.styled.jsx","components/Statistics/StatisticsChart/StatisticsChart.jsx","components/Statistics/CalendarDate/CalendarDate.jsx","components/Statistics/PeriodPaginator/PeriodPaginator.jsx","pages/Private/StatisticsPage/StatisticsPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const StatsPageBox = styled.div`\n  width: 100%;\n  margin-left: auto;\n  margin-right: auto;\n  padding-top: 150px;\n  background-color: #ffffff;\n`;\n\nexport const StatsContainer = styled.div`\n  width: 640px;\n  height: 424px;\n  border: 0.8px solid #e3f3ff;\n  border-radius: 29px;\n`;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport {\n  Bar,\n  BarChart,\n  CartesianGrid,\n  LabelList,\n  Legend,  \n  XAxis,\n  YAxis,\n} from 'recharts';\nimport { selectTasks } from 'redux/task/taskSelectors';\nimport { StatsContainer, StatsPageBox } from './StatisticsChart.styled';\n\nconst StatisticsChart = ({ today, currentDate }) => {\n  const isTasks = useSelector(selectTasks);\n  console.log('currentDate: ', currentDate);\n\n  const dateTask = isTasks\n    .filter(el => el.date === currentDate)\n    .map(task => task.category);\n  console.log('isTasks: ', isTasks);\n  console.log('dateTask: ', dateTask);\n\n  const todoByDay = dateTask.filter(el => el.includes('to-do')).length;\n\n  const inprogressByDay = dateTask.filter(el =>\n    el.includes('in-progress')\n  ).length;\n\n  const doneByDay = dateTask.filter(el => el.includes('done')).length;\n\n  const allTasksByDay = todoByDay + inprogressByDay + doneByDay;\n\n  const todoByDayPercentages = ((todoByDay / allTasksByDay) * 100).toFixed(0);\n  console.log('todoByDayPercentages: ', todoByDayPercentages);\n\n  const inprogressByDayPercentages = (\n    (inprogressByDay / allTasksByDay) *\n    100\n  ).toFixed(0);\n  console.log('inprogressByDayPercentages: ', inprogressByDayPercentages);\n\n  const doneByDayPercentages = ((doneByDay / allTasksByDay) * 100).toFixed(0);\n  console.log('doneByDayPercentages: ', doneByDayPercentages);\n\n  // const dataCurrentMonth = {\n  //   categoryTask: isTasks.map(task => task.category),\n  // };\n\n  // const todoByMonth = dataCurrentMonth.categoryTask.filter(el =>\n  //   el.includes('to-do')\n  // );\n\n  // const inprogressByMonth = dataCurrentMonth.categoryTask.filter(el =>\n  //   el.includes('in-progress')\n  // );\n\n  // const doneByMonth = dataCurrentMonth.categoryTask.filter(el =>\n  //   el.includes('done')\n  // );\n\n  // const allTasksByMonth =\n  //   todoByMonth.length + inprogressByMonth.length + doneByMonth.length;\n\n  // const todoByMonthPercentages = (\n  //   (todoByMonth.length / allTasksByMonth) *\n  //   100\n  // ).toFixed(0);\n\n  // const inprogressByMonthPercentages = (\n  //   (inprogressByMonth.length / allTasksByMonth) *\n  //   100\n  // ).toFixed(0);\n\n  // const doneByMonthPercentages = (\n  //   (doneByMonth.length / allTasksByMonth) *\n  //   100\n  // ).toFixed(0);\n\n  // const renderLabelMonth = () => {\n  //   if (todoByMonth[0] === 'to-do') return todoByMonthPercentages;\n\n  //   if (inprogressByMonth[0] === 'in-progress')\n  //     return inprogressByMonthPercentages;\n  //   if (doneByMonth[0] === 'done') return doneByMonthPercentages;\n  // };\n  const data = [\n    {\n      name: 'To Do',\n      'By Day': 75,\n      'By Month': 44,\n    },\n    {\n      name: 'In Progress',\n      'By Day': 60,\n      'By Month': 64,\n    },\n    {\n      name: 'Done',\n      'By Day': 60,\n      'By Month': 44,\n    },\n  ];\n\n  return (\n    <StatsPageBox>\n      <StatsContainer>\n        <BarChart\n          width={640}\n          height={424}\n          data={data}\n          margin={{ top: 77, right: 32, left: 32, bottom: 60 }}\n        >\n          <CartesianGrid vertical={false} stroke=\"#E3F3FF\" />\n          <XAxis\n            dataKey=\"name\"\n            axisLine={false}\n            tickLine={false}\n            fontSize={14}\n            fontFamily=\"Inter\"\n            tickMargin={20}\n          />\n          <YAxis\n            domain={[0, 100]}\n            tickCount={6}\n            axisLine={false}\n            tickLine={false}\n            label={{\n              value: 'Tasks',\n              position: 'top',\n              dx: -14,\n              dy: -24,\n              fontFamily: 'Inter',\n              fontSize: 14,\n              fontWeight: 600,\n              fill: '#343434',\n            }}\n            tickMargin={32}\n            fontFamily=\"Inter\"\n            fontSize={14}\n          />\n          <Legend\n            wrapperStyle={{ position: 'absolute', top: -50 }}\n            layout=\"horizontal\"\n            verticalAlign=\"top\"\n            align=\"end\"\n            iconSize={8}\n            iconType=\"circle\"\n            markerWidth={5}\n            fontSize={16}\n          />\n          <defs>\n            <linearGradient id=\"colorUv\" x1=\"0\" y1=\"1\" x2=\"0\" y2=\"0.2\">\n              <stop offset=\"30%\" stopColor=\"#FFD2DD\" stopOpacity={1} />\n              <stop offset=\"95%\" stopColor=\"#FFFFFF\" stopOpacity={0.8} />\n            </linearGradient>\n          </defs>\n          <defs>\n            <linearGradient id=\"colorXv\" x1=\"0\" y1=\"1\" x2=\"0\" y2=\"0.2\">\n              <stop offset=\"30%\" stopColor=\"#3E85F3\" stopOpacity={1} />\n              <stop offset=\"95%\" stopColor=\"#FFFFFF\" stopOpacity={0.8} />\n            </linearGradient>\n          </defs>\n          <Bar dataKey=\"By Day\" fill=\"url(#colorUv)\" barSize={27} radius={10}>\n            <LabelList\n              dataKey=\"By Day\"\n              position=\"insideTop\"\n              fill=\"#343434\"\n              style={{ fontWeight: 500 }}\n            />\n          </Bar>\n          <Bar dataKey=\"By Month\" fill=\"url(#colorXv)\" barSize={27} radius={10}>\n            <LabelList\n              dataKey=\"By Month\"\n              position=\"insideTop\"\n              fill=\"#343434\"\n              style={{ fontWeight: 500 }}\n            />\n          </Bar>\n        </BarChart>\n      </StatsContainer>\n    </StatsPageBox>\n  );\n};\n\nexport default StatisticsChart;\n","import { useEffect, useState } from 'react';\n\nimport { format } from 'date-fns';\nimport DatePicker from 'react-date-picker';\nimport 'react-date-picker/dist/DatePicker.css';\nimport 'react-calendar/dist/Calendar.css';\n// import { useNavigate } from 'react-router-dom';\n\nconst CalendarDate = ({ date, currentData }) => {\n  console.log('date: ', date);\n  // const navigate = useNavigate();\n\n  const [dateValue, setDateValue] = useState(date);\n  console.log('dateValue: ', dateValue);\n\n  useEffect(() => {\n    setDateValue(date);\n  }, [date]);\n\n  return (\n    <DatePicker\n      onChange={date => {\n        setDateValue(date);\n        const formattedDate = format(date, 'yyyy-MM-dd');\n        if (setDateValue) {\n          setDateValue(formattedDate);\n        }\n        return currentData(formattedDate);\n      }}\n      value={dateValue}\n      clearIcon={null}\n      format={'y-MM-dd'}\n      locale=\"en-US\"\n      showLeadingZeros={true}\n    />\n  );\n};\n\nexport default CalendarDate;\n","import { useSelector } from 'react-redux';\nimport { selectTheme } from 'redux/header/headerSlice';\nimport PropTypes from 'prop-types';\nimport { parse } from 'date-fns';\nimport { ChevronLeft, ChevronRight } from '../../Calendar/icons';\nimport CalendarDate from '../CalendarDate/CalendarDate';\nimport {\n  Wrapper,\n  ButtonsWrapper,\n  ButtonLeft,\n  ButtonRight,\n} from '../../Calendar/common/PeriodSelector.styled';\nimport { useState } from 'react';\n\nconst PeriodPaginator = ({\n  currentDateData,\n  onClickPrev,\n  onClickNext,\n  today,\n}) => {\n  const [data, setData] = useState('');\n\n  const theme = useSelector(selectTheme);\n\n  const currentData = childData => {\n    setData(childData);\n  };\n  console.log('data:', data);\n\n  const currentDate = parse(today, 'yyyy-MM-dd', new Date());\n  console.log('currentDate: ', currentDate);\n  return (\n    <Wrapper>\n      <CalendarDate\n        currentData={currentData}\n        date={currentDate}\n        currentDateData={currentDateData(data)}\n      />\n\n      <ButtonsWrapper>\n        <ButtonLeft\n          onClick={() => {\n            onClickPrev();\n          }}\n          bgcolor={theme === 'dark' ? '#21222c' : '#ffffff'}\n          bordercolor={\n            theme === 'dark'\n              ? 'rgba(255, 255, 255, 0.15)'\n              : 'rgba(220, 227, 229, 0.80)'\n          }\n          color={theme === 'dark' ? '#ffffff' : '#343434'}\n          hovercolor={\n            theme === 'dark'\n              ? 'rgba(255, 255, 255, 0.15)'\n              : 'rgba(220, 227, 229, 1)'\n          }\n        >\n          <ChevronRight width=\"18px\" height=\"18px\" />\n        </ButtonLeft>\n\n        <ButtonRight\n          onClick={() => {\n            onClickNext();\n          }}\n          bgcolor={theme === 'dark' ? '#21222C' : '#ffffff'}\n          bordercolor={\n            theme === 'dark'\n              ? 'rgba(255, 255, 255, 0.15)'\n              : 'rgba(220, 227, 229, 0.80)'\n          }\n          color={theme === 'dark' ? '#ffffff' : '#343434'}\n          hovercolor={\n            theme === 'dark'\n              ? 'rgba(255, 255, 255, 0.15)'\n              : 'rgba(220, 227, 229, 1)'\n          }\n        >\n          <ChevronLeft width=\"18px\" height=\"18px\" />\n        </ButtonRight>\n      </ButtonsWrapper>\n    </Wrapper>\n  );\n};\n\nexport default PeriodPaginator;\n\nPeriodPaginator.propTypes = {\n  // onClickPrev: PropTypes.func.isRequired,\n  // onClickNext: PropTypes.func.isRequired,\n  // type: PropTypes.string,\n  date: PropTypes.string,\n};\n","import React, { useEffect, useState } from 'react';\n\nimport MainLayout from 'components/MainLayout/MainLayout';\nimport StatisticsChart from 'components/Statistics/StatisticsChart/StatisticsChart';\n// import Header from 'components/Header/Header';\nimport { getCurrentDate } from 'utils/calendar';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTasks } from 'redux/task/taskOperations';\nimport { HeaderContainer } from '../CalendarPage/CalendarPage.styled';\nimport Header from 'components/Header/Header';\nimport { selectTheme } from 'redux/header/headerSlice';\nimport { CalendarContainer } from 'components/Calendar/common';\nimport PeriodPaginator from 'components/Statistics/PeriodPaginator/PeriodPaginator';\nimport { addDays, subDays } from 'date-fns';\n\n// import { Link } from 'react-router-dom';\n// import { Circles } from 'react-loader-spinner'; //! Спинер\n\nconst StatisticsPage = () => {\n  const [dateData, setDateData] = useState('');\n  const dispatch = useDispatch();\n\n  const theme = useSelector(selectTheme);\n  const currentDay = getCurrentDate();\n  useEffect(() => {\n    dispatch(getTasks(dateData.slice(0, 7)));\n  }, [dispatch, dateData]);\n\n  const currentDateData = childData => {\n    setDateData(childData);\n  };\n  console.log('dateData:', dateData);\n\n  const handlePrev = () => {\n    subDays(new Date(dateData), 1);\n  };\n\n  const handleNext = () => {\n    addDays(new Date(dateData), 1);\n  };\n\n  return (\n    <MainLayout>\n      <CalendarContainer bgcolor={theme === 'dark' ? '#171820' : '#f7f6f9'}>\n        <HeaderContainer>\n          <Header pageName=\"Statistics\" />\n        </HeaderContainer>\n        <PeriodPaginator\n          currentDateData={currentDateData}\n          today={currentDay}\n          onClickPrev={handlePrev}\n          onClickNext={handleNext}\n        />\n        <StatisticsChart currentDate={dateData} />\n      </CalendarContainer>\n    </MainLayout>\n\n    // {isLoading && !error && (\n    //     <Circles\n    //       height=\"80\"\n    //       width=\"80\"\n    //       color=\"#4d78a9\"\n    //!       wrapperClass={css.loader}\n    //     />\n    //   )}\n  );\n};\n\nexport default StatisticsPage;\n\n// .loader {\n//     position: fixed;\n//     top: 0;\n//     width: 100%;\n//     height: 100%;\n//     display: flex;\n//     align-items: center;\n//     justify-content: center;\n//   }\n"],"names":["StatsPageBox","styled","StatsContainer","today","currentDate","isTasks","useSelector","selectTasks","console","log","dateTask","filter","el","date","map","task","category","todoByDay","includes","length","inprogressByDay","doneByDay","allTasksByDay","todoByDayPercentages","toFixed","inprogressByDayPercentages","doneByDayPercentages","BarChart","width","height","data","name","margin","top","right","left","bottom","CartesianGrid","vertical","stroke","XAxis","dataKey","axisLine","tickLine","fontSize","fontFamily","tickMargin","YAxis","domain","tickCount","label","value","position","dx","dy","fontWeight","fill","Legend","wrapperStyle","layout","verticalAlign","align","iconSize","iconType","markerWidth","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","Bar","barSize","radius","LabelList","style","currentData","useState","dateValue","setDateValue","useEffect","onChange","formattedDate","format","clearIcon","locale","showLeadingZeros","currentDateData","onClickPrev","onClickNext","setData","theme","selectTheme","parse","Date","childData","onClick","bgcolor","bordercolor","color","hovercolor","dateData","setDateData","dispatch","useDispatch","currentDay","getCurrentDate","getTasks","slice","MainLayout","Header","pageName","subDays","addDays"],"sourceRoot":""}