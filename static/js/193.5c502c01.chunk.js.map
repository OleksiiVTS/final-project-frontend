{"version":3,"file":"static/js/193.5c502c01.chunk.js","mappings":"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","sources":["components/Statistics/StatisticsChart/StatisticsChart.styled.jsx","components/Statistics/StatisticsChart/StatisticsChart.jsx","components/Statistics/CalendarDate/CalendarDate.jsx","components/Statistics/PeriodPaginator/PeriodPaginator.jsx","pages/Private/StatisticsPage/StatisticsPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const StatsPageBox = styled.div`\n  width: 100%;\n  margin-left: auto;\n  margin-right: auto;\n  padding-top: 150px;\n  background-color: #ffffff;\n`;\n\nexport const StatsContainer = styled.div`\n  width: 640px;\n  height: 424px;\n  border: 0.8px solid #e3f3ff;\n  border-radius: 29px;\n`;\n","import { useSelector } from 'react-redux';\nimport { format } from 'date-fns';\n\nimport {\n  Bar,\n  BarChart,\n  CartesianGrid,\n  LabelList,\n  Legend,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport { selectTasks } from 'redux/task/taskSelectors';\nimport { StatsContainer, StatsPageBox } from './StatisticsChart.styled';\n\nconst StatisticsChart = ({ date }) => {\n  const isTasks = useSelector(selectTasks);\n\n  const parsedDate = format(date, 'yyyy-MM-dd');\n\n  const dateTask = isTasks\n    .filter(el => el.date === parsedDate)\n    .map(task => task.category);\n\n  const todoByDay = dateTask.filter(el => el.includes('to-do')).length;\n\n  const inprogressByDay = dateTask.filter(el =>\n    el.includes('in-progress')\n  ).length;\n\n  const doneByDay = dateTask.filter(el => el.includes('done')).length;\n\n  const allTasksByDay = todoByDay + inprogressByDay + doneByDay;\n\n  const todoByDayPercentages = ((todoByDay / allTasksByDay) * 100).toFixed(0);\n\n  const inprogressByDayPercentages = (\n    (inprogressByDay / allTasksByDay) *\n    100\n  ).toFixed(0);\n\n  const doneByDayPercentages = ((doneByDay / allTasksByDay) * 100).toFixed(0);\n\n  const dataCurrentMonth = {\n    categoryTask: isTasks.map(task => task.category),\n  };\n\n  const todoByMonth = dataCurrentMonth.categoryTask.filter(el =>\n    el.includes('to-do')\n  );\n\n  const inprogressByMonth = dataCurrentMonth.categoryTask.filter(el =>\n    el.includes('in-progress')\n  );\n\n  const doneByMonth = dataCurrentMonth.categoryTask.filter(el =>\n    el.includes('done')\n  );\n\n  const allTasksByMonth =\n    todoByMonth.length + inprogressByMonth.length + doneByMonth.length;\n\n  const todoByMonthPercentages = (\n    (todoByMonth.length / allTasksByMonth) *\n    100\n  ).toFixed(0);\n\n  const inprogressByMonthPercentages = (\n    (inprogressByMonth.length / allTasksByMonth) *\n    100\n  ).toFixed(0);\n\n  const doneByMonthPercentages = (\n    (doneByMonth.length / allTasksByMonth) *\n    100\n  ).toFixed(0);\n\n  const data = [\n    {\n      name: 'To Do',\n      'By Day': todoByDayPercentages,\n      'By Month': todoByMonthPercentages,\n    },\n    {\n      name: 'In Progress',\n      'By Day': inprogressByDayPercentages,\n      'By Month': inprogressByMonthPercentages,\n    },\n    {\n      name: 'Done',\n      'By Day': doneByDayPercentages,\n      'By Month': doneByMonthPercentages,\n    },\n  ];\n\n  return (\n    <StatsPageBox>\n      <StatsContainer>\n        <BarChart\n          width={640}\n          height={424}\n          data={data}\n          margin={{ top: 77, right: 32, left: 32, bottom: 60 }}\n        >\n          <CartesianGrid vertical={false} stroke=\"#E3F3FF\" />\n          <XAxis\n            dataKey=\"name\"\n            axisLine={false}\n            tickLine={false}\n            fontSize={14}\n            fontFamily=\"Inter\"\n            tickMargin={20}\n          />\n          <YAxis\n            domain={[0, 100]}\n            tickCount={6}\n            axisLine={false}\n            tickLine={false}\n            label={{\n              value: 'Tasks',\n              position: 'top',\n              dx: -14,\n              dy: -24,\n              fontFamily: 'Inter',\n              fontSize: 14,\n              fontWeight: 600,\n              fill: '#343434',\n            }}\n            tickMargin={32}\n            fontFamily=\"Inter\"\n            fontSize={14}\n          />\n          <Legend\n            wrapperStyle={{ position: 'absolute', top: -50 }}\n            layout=\"horizontal\"\n            verticalAlign=\"top\"\n            align=\"end\"\n            iconSize={8}\n            iconType=\"circle\"\n            markerWidth={5}\n            fontSize={16}\n          />\n          <defs>\n            <linearGradient id=\"colorUv\" x1=\"0\" y1=\"1\" x2=\"0\" y2=\"0.2\">\n              <stop offset=\"30%\" stopColor=\"#FFD2DD\" stopOpacity={1} />\n              <stop offset=\"95%\" stopColor=\"#FFFFFF\" stopOpacity={0.8} />\n            </linearGradient>\n          </defs>\n          <defs>\n            <linearGradient id=\"colorXv\" x1=\"0\" y1=\"1\" x2=\"0\" y2=\"0.2\">\n              <stop offset=\"30%\" stopColor=\"#3E85F3\" stopOpacity={1} />\n              <stop offset=\"95%\" stopColor=\"#FFFFFF\" stopOpacity={0.8} />\n            </linearGradient>\n          </defs>\n          <Bar dataKey=\"By Day\" fill=\"url(#colorUv)\" barSize={27} radius={10}>\n            <LabelList\n              dataKey=\"By Day\"\n              position=\"insideTop\"\n              fill=\"#343434\"\n              style={{ fontWeight: 500 }}\n            />\n          </Bar>\n          <Bar dataKey=\"By Month\" fill=\"url(#colorXv)\" barSize={27} radius={10}>\n            <LabelList\n              dataKey=\"By Month\"\n              position=\"insideTop\"\n              fill=\"#343434\"\n              style={{ fontWeight: 500 }}\n            />\n          </Bar>\n        </BarChart>\n      </StatsContainer>\n    </StatsPageBox>\n  );\n};\n\nexport default StatisticsChart;\n","import { useState } from 'react';\nimport { format } from 'date-fns';\nimport ReactDatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker-cssmodules.css';\nimport {\n  DatePickerButton,\n  DatePickerWrapper,\n  CalendarGlobalStyles,\n} from 'components/Calendar/common/NewCalendarDatePicker.styled';\n\nconst CalendarDate = ({ date, setDate }) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleClick = () => setIsOpen(!isOpen);\n\n  return (\n    <DatePickerWrapper>\n      <DatePickerButton type=\"button\" onClick={handleClick}>\n        {format(date, 'd MMM y')}\n      </DatePickerButton>\n      {isOpen && (\n        <>\n          <ReactDatePicker\n            selected={date}\n            onChange={newDate => {\n              setDate(newDate);\n              handleClick();\n            }}\n            allowSameDay={true}\n            inline\n            calendarStartDay={1}\n            dateFormat={'dd MMMM yyyy'}\n            formatWeekDay={day => day.substring(0, 1)}\n          />\n          <CalendarGlobalStyles />\n        </>\n      )}\n    </DatePickerWrapper>\n  );\n};\n\nexport default CalendarDate;\n","import { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport CalendarDate from '../CalendarDate/CalendarDate';\nimport { selectTheme } from 'redux/header/headerSlice';\nimport { ChevronLeft, ChevronRight } from '../../Calendar/icons';\nimport {\n  Wrapper,\n  ButtonsWrapper,\n  ButtonLeft,\n  ButtonRight,\n} from '../../Calendar/common/PeriodSelector.styled';\n\nconst PeriodPaginator = ({ date, onClickPrev, onClickNext, setDate }) => {\n  const theme = useSelector(selectTheme);\n  return (\n    <Wrapper>\n      <CalendarDate date={date} setDate={setDate} />\n\n      <ButtonsWrapper>\n        <ButtonLeft\n          onClick={() => onClickPrev()}\n          bgcolor={theme === 'dark' ? '#21222c' : '#ffffff'}\n          bordercolor={\n            theme === 'dark'\n              ? 'rgba(255, 255, 255, 0.15)'\n              : 'rgba(220, 227, 229, 0.80)'\n          }\n          color={theme === 'dark' ? '#ffffff' : '#343434'}\n          hovercolor={\n            theme === 'dark'\n              ? 'rgba(255, 255, 255, 0.15)'\n              : 'rgba(220, 227, 229, 1)'\n          }\n        >\n          <ChevronRight width=\"18px\" height=\"18px\" />\n        </ButtonLeft>\n\n        <ButtonRight\n          onClick={() => onClickNext()}\n          bgcolor={theme === 'dark' ? '#21222C' : '#ffffff'}\n          bordercolor={\n            theme === 'dark'\n              ? 'rgba(255, 255, 255, 0.15)'\n              : 'rgba(220, 227, 229, 0.80)'\n          }\n          color={theme === 'dark' ? '#ffffff' : '#343434'}\n          hovercolor={\n            theme === 'dark'\n              ? 'rgba(255, 255, 255, 0.15)'\n              : 'rgba(220, 227, 229, 1)'\n          }\n        >\n          <ChevronLeft width=\"18px\" height=\"18px\" />\n        </ButtonRight>\n      </ButtonsWrapper>\n    </Wrapper>\n  );\n};\n\nexport default PeriodPaginator;\n\nPeriodPaginator.propTypes = {\n  // currentDateData: PropTypes.func,\n  // onClickPrev: PropTypes.func.isRequired,\n  // onClickNext: PropTypes.func.isRequired,\n  // type: PropTypes.string,\n  date: PropTypes.object,\n};\n","import { useEffect, useRef, useState } from 'react';\nimport { addDays, format, subDays } from 'date-fns';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport MainLayout from 'components/MainLayout/MainLayout';\nimport StatisticsChart from 'components/Statistics/StatisticsChart/StatisticsChart';\nimport { HeaderContainer } from '../CalendarPage/CalendarPage.styled';\nimport Header from 'components/Header/Header';\nimport { CalendarContainer } from 'components/Calendar/common';\nimport PeriodPaginator from 'components/Statistics/PeriodPaginator/PeriodPaginator';\n// import Header from 'components/Header/Header';\nimport { getTasks } from 'redux/task/taskOperations';\nimport { selectTheme } from 'redux/header/headerSlice';\n\n// import { Link } from 'react-router-dom';\n// import { Circles } from 'react-loader-spinner'; //! Спинер\n\nconst StatisticsPage = () => {\n  const dispatch = useDispatch();\n  const [date, setDate] = useState(new Date());\n\n  const prevMonthRef = useRef(null);\n\n  useEffect(() => {\n    const currentMonth = format(date, 'MM');\n    if (prevMonthRef.current === currentMonth) return;\n    prevMonthRef.current = currentMonth;\n    dispatch(getTasks(format(date, 'yyyy-MM-dd').slice(0, 7)));\n  }, [dispatch, date]);\n\n  const handlePrev = () => {\n    setDate(subDays(date, 1));\n  };\n\n  const handleNext = () => {\n    setDate(addDays(date, 1));\n  };\n\n  const theme = useSelector(selectTheme);\n  return (\n    <MainLayout>\n      <CalendarContainer bgcolor={theme === 'dark' ? '#171820' : '#f7f6f9'}>\n        <HeaderContainer>\n          <Header pageName=\"Statistics\" />\n        </HeaderContainer>\n        <PeriodPaginator\n          date={date}\n          onClickPrev={handlePrev}\n          onClickNext={handleNext}\n          setDate={setDate}\n        />\n        <StatisticsChart date={date}>\n          <PeriodPaginator\n            date={date}\n            onClickPrev={handlePrev}\n            onClickNext={handleNext}\n            setDate={setDate}\n          />\n        </StatisticsChart>\n      </CalendarContainer>\n    </MainLayout>\n\n    // {isLoading && !error && (\n    //     <Circles\n    //       height=\"80\"\n    //       width=\"80\"\n    //       color=\"#4d78a9\"\n    //!       wrapperClass={css.loader}\n    //     />\n    //   )}\n  );\n};\n\nexport default StatisticsPage;\n\n// .loader {\n//     position: fixed;\n//     top: 0;\n//     width: 100%;\n//     height: 100%;\n//     display: flex;\n//     align-items: center;\n//     justify-content: center;\n//   }\n"],"names":["StatsPageBox","styled","StatsContainer","date","isTasks","useSelector","selectTasks","parsedDate","format","dateTask","filter","el","map","task","category","todoByDay","includes","length","inprogressByDay","doneByDay","allTasksByDay","todoByDayPercentages","toFixed","inprogressByDayPercentages","doneByDayPercentages","dataCurrentMonth","categoryTask","todoByMonth","inprogressByMonth","doneByMonth","allTasksByMonth","data","name","BarChart","width","height","margin","top","right","left","bottom","CartesianGrid","vertical","stroke","XAxis","dataKey","axisLine","tickLine","fontSize","fontFamily","tickMargin","YAxis","domain","tickCount","label","value","position","dx","dy","fontWeight","fill","Legend","wrapperStyle","layout","verticalAlign","align","iconSize","iconType","markerWidth","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","Bar","barSize","radius","LabelList","style","setDate","useState","isOpen","setIsOpen","handleClick","type","onClick","selected","onChange","newDate","allowSameDay","inline","calendarStartDay","dateFormat","formatWeekDay","day","substring","onClickPrev","onClickNext","theme","selectTheme","bgcolor","bordercolor","color","hovercolor","dispatch","useDispatch","Date","prevMonthRef","useRef","useEffect","currentMonth","current","getTasks","slice","handlePrev","subDays","handleNext","addDays","MainLayout","Header","pageName"],"sourceRoot":""}