{"version":3,"file":"static/js/650.7ba974ec.chunk.js","mappings":"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","sources":["components/Statistics/StatisticsChart/StatisticsChart.jsx","components/Statistics/CalendarDate/CalendarDate.jsx","components/Statistics/PeriodPaginator/PeriodPaginator.jsx","pages/Private/StatisticsPage/StatisticsPage.jsx","redux/task/taskSelectors.js"],"sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport {\n  Bar,\n  BarChart,\n  CartesianGrid,\n  Legend,\n  Rectangle,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport { selectTasks } from 'redux/task/taskSelectors';\n\nconst StatisticsChart = ({ today, currentDate }) => {\n  const isTasks = useSelector(selectTasks);\n  console.log('currentDate: ', currentDate);\n\n  const dateTask = isTasks\n    .filter(el => el.date === currentDate)\n    .map(task => task.category);\n  console.log('isTasks: ', isTasks);\n  console.log('dateTask: ', dateTask);\n\n  const todoByDay = dateTask.filter(el => el.includes('to-do')).length;\n\n  const inprogressByDay = dateTask.filter(el =>\n    el.includes('in-progress')\n  ).length;\n\n  const doneByDay = dateTask.filter(el => el.includes('done')).length;\n\n  const allTasksByDay = todoByDay + inprogressByDay + doneByDay;\n\n  const todoByDayPercentages = ((todoByDay / allTasksByDay) * 100).toFixed(0);\n  console.log('todoByDayPercentages: ', todoByDayPercentages);\n\n  const inprogressByDayPercentages = (\n    (inprogressByDay / allTasksByDay) *\n    100\n  ).toFixed(0);\n  console.log('inprogressByDayPercentages: ', inprogressByDayPercentages);\n\n  const doneByDayPercentages = ((doneByDay / allTasksByDay) * 100).toFixed(0);\n  console.log('doneByDayPercentages: ', doneByDayPercentages);\n\n  const dataCurrentMonth = {\n    categoryTask: isTasks.map(task => task.category),\n  };\n\n  const todoByMonth = dataCurrentMonth.categoryTask.filter(el =>\n    el.includes('to-do')\n  );\n\n  const inprogressByMonth = dataCurrentMonth.categoryTask.filter(el =>\n    el.includes('in-progress')\n  );\n\n  const doneByMonth = dataCurrentMonth.categoryTask.filter(el =>\n    el.includes('done')\n  );\n\n  const allTasksByMonth =\n    todoByMonth.length + inprogressByMonth.length + doneByMonth.length;\n\n  const todoByMonthPercentages = (\n    (todoByMonth.length / allTasksByMonth) *\n    100\n  ).toFixed(0);\n\n  const inprogressByMonthPercentages = (\n    (inprogressByMonth.length / allTasksByMonth) *\n    100\n  ).toFixed(0);\n\n  const doneByMonthPercentages = (\n    (doneByMonth.length / allTasksByMonth) *\n    100\n  ).toFixed(0);\n\n  // const renderLabelMonth = () => {\n  //   if (todoByMonth[0] === 'to-do') return todoByMonthPercentages;\n\n  //   if (inprogressByMonth[0] === 'in-progress')\n  //     return inprogressByMonthPercentages;\n  //   if (doneByMonth[0] === 'done') return doneByMonthPercentages;\n  // };\n  const data = [\n    {\n      name: 'To-Do',\n      uv: todoByMonthPercentages,\n      pv: todoByDayPercentages,\n      amt: 100,\n    },\n    {\n      name: 'In-Progress',\n      uv: inprogressByMonthPercentages,\n      pv: inprogressByDayPercentages,\n      amt: 100,\n    },\n    {\n      name: 'Done',\n      uv: doneByMonthPercentages,\n      pv: doneByDayPercentages,\n      amt: 100,\n    },\n  ];\n\n  return (\n    <BarChart\n      width={1100}\n      height={800}\n      data={data}\n      margin={{\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5,\n      }}\n    >\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis dataKey=\"name\" />\n      <YAxis dataKey=\"amt\" />\n      <Tooltip />\n      <Legend />\n      <Bar\n        dataKey=\"pv\"\n        fill=\"#82ca9d\"\n        activeBar={<Rectangle fill=\"pink\" stroke=\"blue\" />}\n      />\n      <Bar\n        dataKey=\"uv\"\n        fill=\"#8884d8\"\n        activeBar={<Rectangle fill=\"gold\" stroke=\"purple\" />}\n      />\n    </BarChart>\n  );\n};\n\nexport default StatisticsChart;\n","import { useEffect, useState } from 'react';\n\nimport { format } from 'date-fns';\nimport DatePicker from 'react-date-picker';\nimport 'react-date-picker/dist/DatePicker.css';\nimport 'react-calendar/dist/Calendar.css';\n// import { useNavigate } from 'react-router-dom';\n\nconst CalendarDate = ({ date, currentData }) => {\n  console.log('date: ', date);\n  // const navigate = useNavigate();\n\n  const [dateValue, setDateValue] = useState(date);\n  console.log('dateValue: ', dateValue);\n\n  useEffect(() => {\n    setDateValue(date);\n  }, [date]);\n\n  return (\n    <DatePicker\n      onChange={date => {\n        setDateValue(date);\n        const formattedDate = format(date, 'yyyy-MM-dd');\n        if (setDateValue) {\n          setDateValue(formattedDate);\n        }\n        return currentData(formattedDate);\n      }}\n      value={dateValue}\n      clearIcon={null}\n      format={'y-MM-dd'}\n      locale=\"en-US\"\n      showLeadingZeros={true}\n    />\n  );\n};\n\nexport default CalendarDate;\n","import { useSelector } from 'react-redux';\nimport { selectTheme } from 'redux/header/headerSlice';\nimport PropTypes from 'prop-types';\nimport { parse } from 'date-fns';\nimport { ChevronLeft, ChevronRight } from '../../Calendar/icons';\nimport CalendarDate from '../CalendarDate/CalendarDate';\nimport {\n  Wrapper,\n  ButtonsWrapper,\n  ButtonLeft,\n  ButtonRight,\n} from '../../Calendar/common/PeriodSelector.styled';\nimport { useState } from 'react';\n\nconst PeriodPaginator = ({\n  currentDateData,\n  onClickPrev,\n  onClickNext,\n  today,\n}) => {\n  const [data, setData] = useState('');\n\n  const theme = useSelector(selectTheme);\n\n  const currentData = childData => {\n    setData(childData);\n  };\n  console.log('data:', data);\n\n  const currentDate = parse(today, 'yyyy-MM-dd', new Date());\n  console.log('currentDate: ', currentDate);\n  return (\n    <Wrapper>\n      <CalendarDate\n        currentData={currentData}\n        date={currentDate}\n        currentDateData={currentDateData(data)}\n      />\n\n      <ButtonsWrapper>\n        <ButtonLeft\n          onClick={() => {\n            onClickPrev();\n          }}\n          bgcolor={theme === 'dark' ? '#21222c' : '#ffffff'}\n          bordercolor={\n            theme === 'dark'\n              ? 'rgba(255, 255, 255, 0.15)'\n              : 'rgba(220, 227, 229, 0.80)'\n          }\n          color={theme === 'dark' ? '#ffffff' : '#343434'}\n          hovercolor={\n            theme === 'dark'\n              ? 'rgba(255, 255, 255, 0.15)'\n              : 'rgba(220, 227, 229, 1)'\n          }\n        >\n          <ChevronRight width=\"18px\" height=\"18px\" />\n        </ButtonLeft>\n\n        <ButtonRight\n          onClick={() => {\n            onClickNext();\n          }}\n          bgcolor={theme === 'dark' ? '#21222C' : '#ffffff'}\n          bordercolor={\n            theme === 'dark'\n              ? 'rgba(255, 255, 255, 0.15)'\n              : 'rgba(220, 227, 229, 0.80)'\n          }\n          color={theme === 'dark' ? '#ffffff' : '#343434'}\n          hovercolor={\n            theme === 'dark'\n              ? 'rgba(255, 255, 255, 0.15)'\n              : 'rgba(220, 227, 229, 1)'\n          }\n        >\n          <ChevronLeft width=\"18px\" height=\"18px\" />\n        </ButtonRight>\n      </ButtonsWrapper>\n    </Wrapper>\n  );\n};\n\nexport default PeriodPaginator;\n\nPeriodPaginator.propTypes = {\n  // onClickPrev: PropTypes.func.isRequired,\n  // onClickNext: PropTypes.func.isRequired,\n  // type: PropTypes.string,\n  date: PropTypes.string,\n};\n","import React, { useEffect, useState } from 'react';\n\nimport MainLayout from 'components/MainLayout/MainLayout';\nimport StatisticsChart from 'components/Statistics/StatisticsChart/StatisticsChart';\n// import Header from 'components/Header/Header';\nimport { getCurrentDate } from 'utils/calendar';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTasks } from 'redux/task/taskOperations';\nimport { HeaderContainer } from '../CalendarPage/CalendarPage.styled';\nimport Header from 'components/Header/Header';\nimport { selectTheme } from 'redux/header/headerSlice';\nimport { CalendarContainer } from 'components/Calendar/common';\nimport PeriodPaginator from 'components/Statistics/PeriodPaginator/PeriodPaginator';\nimport { addDays, subDays } from 'date-fns';\n\n// import { Link } from 'react-router-dom';\n// import { Circles } from 'react-loader-spinner'; //! Спинер\n\nconst StatisticsPage = () => {\n  const [dateData, setDateData] = useState('');\n  const dispatch = useDispatch();\n\n  const theme = useSelector(selectTheme);\n  const currentDay = getCurrentDate();\n  useEffect(() => {\n    dispatch(getTasks(dateData.slice(0, 7)));\n  }, [dispatch, dateData]);\n\n  const currentDateData = childData => {\n    setDateData(childData);\n  };\n  console.log('dateData:', dateData);\n\n  const handlePrev = () => {\n    subDays(new Date(dateData), 1);\n  };\n\n  const handleNext = () => {\n    addDays(new Date(dateData), 1);\n  };\n\n  return (\n    <MainLayout>\n      <CalendarContainer bgcolor={theme === 'dark' ? '#171820' : '#f7f6f9'}>\n        <HeaderContainer>\n          <Header pageName=\"Statistics\" />\n        </HeaderContainer>\n        <PeriodPaginator\n          currentDateData={currentDateData}\n          today={currentDay}\n          onClickPrev={handlePrev}\n          onClickNext={handleNext}\n        />\n        <StatisticsChart currentDate={dateData} />\n      </CalendarContainer>\n    </MainLayout>\n\n    // {isLoading && !error && (\n    //     <Circles\n    //       height=\"80\"\n    //       width=\"80\"\n    //       color=\"#4d78a9\"\n    //!       wrapperClass={css.loader}\n    //     />\n    //   )}\n  );\n};\n\nexport default StatisticsPage;\n\n// .loader {\n//     position: fixed;\n//     top: 0;\n//     width: 100%;\n//     height: 100%;\n//     display: flex;\n//     align-items: center;\n//     justify-content: center;\n//   }\n","export const selectTasks = state => state.tasks.tasks;\nexport const selectIsError = state => state.tasks.error;\nexport const selectIsLoading = state => state.tasks.isLoading;\n"],"names":["today","currentDate","isTasks","useSelector","selectTasks","console","log","dateTask","filter","el","date","map","task","category","todoByDay","includes","length","inprogressByDay","doneByDay","allTasksByDay","todoByDayPercentages","toFixed","inprogressByDayPercentages","doneByDayPercentages","dataCurrentMonth","categoryTask","todoByMonth","inprogressByMonth","doneByMonth","allTasksByMonth","data","name","uv","pv","amt","BarChart","width","height","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","fill","activeBar","Rectangle","stroke","currentData","useState","dateValue","setDateValue","useEffect","onChange","formattedDate","format","value","clearIcon","locale","showLeadingZeros","currentDateData","onClickPrev","onClickNext","setData","theme","selectTheme","parse","Date","childData","onClick","bgcolor","bordercolor","color","hovercolor","dateData","setDateData","dispatch","useDispatch","currentDay","getCurrentDate","getTasks","slice","MainLayout","Header","pageName","subDays","addDays","state","tasks","selectIsError","error","selectIsLoading","isLoading"],"sourceRoot":""}